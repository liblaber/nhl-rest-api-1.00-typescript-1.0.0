// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { Standings, standingsResponse } from '../common';
import { GetStandingsParams } from './request-params';
import { GetStandingsByTypeType, StandingTypes, standingTypesResponse } from './models';

export class StandingsService extends BaseService {
  /**
   *
   * @param {string} [season] - Standings for a specified season.
   * @param {string} [date] - Standings on a specified date.
   * @returns {Promise<HttpResponse<Standings>>} OK
   */
  async getStandings(params?: GetStandingsParams, requestConfig?: RequestConfig): Promise<HttpResponse<Standings>> {
    const path = '/standings';
    const options: any = {
      responseSchema: standingsResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.season) {
      options.queryParams['season'] = params?.season;
    }
    if (params?.date) {
      options.queryParams['date'] = params?.date;
    }
    return this.client.get(path, options);
  }

  /**
 * 
 * @param {GetStandingsByTypeType} type_ - Standing types:
  * `byConference` - Standings by Conference
  * `byDivision` - Standings by Division
  * `byLeague` - Standings by League
  * `divisionLeaders` - Division Leader standings
  * `postseason` - Postseason Standings
  * `preseason` - Preseason Standings
  * `regularSeason` - Regular Season Standings
  * `wildCard` - Wild card standings
  * `wildCardWithLeaders` - Wild card standings with Division Leaders

 * @returns {Promise<HttpResponse<Standings>>} OK
 */
  async getStandingsByType(
    type_: GetStandingsByTypeType,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<Standings>> {
    const path = this.client.buildPath('/standings/{type}', { type: type_ });
    const options: any = {
      responseSchema: standingsResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   *
   * @returns {Promise<HttpResponse<StandingTypes[]>>} OK
   */
  async getStandingTypes(requestConfig?: RequestConfig): Promise<HttpResponse<StandingTypes[]>> {
    const path = '/standingsTypes';
    const options: any = {
      responseSchema: z.array(standingTypesResponse),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }
}
