// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { Request } from '../../http/transport/request';

export class StandingsService extends BaseService {
  /**
   * Retrieve the standings as of the current moment.
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getCurrentStandings(requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new Request({
      method: 'GET',
      path: '/v1/standings/now',
      config: this.config,
      responseSchema: z.any(),
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    return this.client.call(request);
  }

  /**
   * Retrieve the standings for a specific date.
   * @param {string} date - Date in YYYY-MM-DD format
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getStandingsByDate(date: string, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new Request({
      method: 'GET',
      path: '/v1/standings/{date}',
      config: this.config,
      responseSchema: z.any(),
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('date', date);
    return this.client.call(request);
  }

  /**
   * Retrieves information for each season's standings.
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getStandingsSeason(requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new Request({
      method: 'GET',
      path: '/v1/standings-season',
      config: this.config,
      responseSchema: z.any(),
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    return this.client.call(request);
  }
}
