// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { Rosters, TeamStats, Teams, rostersResponse, teamStatsResponse, teamsResponse } from './models';
import { GetTeamParams, GetTeamRosterParams, GetTeamsParams } from './request-params';
import { Team, teamResponse } from '../common';

export class TeamsService extends BaseService {
  /**
   *
   * @param {GetTeamsExpand} [expand] - Expand your response for some additional data.
   * @param {number} [season] - Return a team's specific season.
   * @returns {Promise<HttpResponse<Teams>>} OK
   */
  async getTeams(params?: GetTeamsParams, requestConfig?: RequestConfig): Promise<HttpResponse<Teams>> {
    const path = '/teams';
    const options: any = {
      responseSchema: teamsResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.expand) {
      options.queryParams['expand'] = params?.expand;
    }
    if (params?.season) {
      options.queryParams['season'] = params?.season;
    }
    return this.client.get(path, options);
  }

  /**
   *
   * @param {number} id - The ID of the team.
   * @param {GetTeamsExpand} [expand] - Expand your response for some additional data.
   * @param {number} [season] - Return a team's specific season.
   * @returns {Promise<HttpResponse<Team>>} OK
   */
  async getTeam(id: number, params?: GetTeamParams, requestConfig?: RequestConfig): Promise<HttpResponse<Team>> {
    const path = this.client.buildPath('/teams/{id}', { id: id });
    const options: any = {
      responseSchema: teamResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.expand) {
      options.queryParams['expand'] = params?.expand;
    }
    if (params?.season) {
      options.queryParams['season'] = params?.season;
    }
    return this.client.get(path, options);
  }

  /**
   *
   * @param {number} id - The ID of the team.
   * @param {number} [season] - Return a team's specific season.
   * @returns {Promise<HttpResponse<Rosters>>} OK
   */
  async getTeamRoster(
    id: number,
    params?: GetTeamRosterParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<Rosters>> {
    const path = this.client.buildPath('/teams/{id}/roster', { id: id });
    const options: any = {
      responseSchema: rostersResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.season) {
      options.queryParams['season'] = params?.season;
    }
    return this.client.get(path, options);
  }

  /**
   *
   * @param {number} id - The ID of the team.
   * @returns {Promise<HttpResponse<TeamStats>>} OK
   */
  async getTeamStats(id: number, requestConfig?: RequestConfig): Promise<HttpResponse<TeamStats>> {
    const path = this.client.buildPath('/teams/{id}/stats', { id: id });
    const options: any = {
      responseSchema: teamStatsResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }
}
