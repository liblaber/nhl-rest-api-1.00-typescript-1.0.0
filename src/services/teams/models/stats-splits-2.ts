// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { splitsStat2, splitsStat2Request, splitsStat2Response } from './splits-stat-2';
import { splitsTeam, splitsTeamRequest, splitsTeamResponse } from './splits-team';

/**
 * The shape of the model inside the application code - what the users use
 */
export const statsSplits2 = z.object({
  stat: splitsStat2.optional(),
  team: splitsTeam.optional(),
});

/**
 *
 * @typedef  {StatsSplits2} statsSplits2
 * @property {SplitsStat2}
 * @property {SplitsTeam}
 */
export type StatsSplits2 = z.infer<typeof statsSplits2>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const statsSplits2Response = z
  .object({
    stat: splitsStat2Response.optional(),
    team: splitsTeamResponse.optional(),
  })
  .transform((data) => ({
    stat: data['stat'],
    team: data['team'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const statsSplits2Request = z
  .object({ stat: splitsStat2Request.nullish(), team: splitsTeamRequest.nullish() })
  .transform((data) => ({
    stat: data['stat'],
    team: data['team'],
  }));
