// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const statsType2 = z.object({
  displayName: z.string().optional(),
});

/**
 *
 * @typedef  {StatsType2} statsType2
 * @property {string}
 */
export type StatsType2 = z.infer<typeof statsType2>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const statsType2Response = z
  .object({
    displayName: z.string().optional(),
  })
  .transform((data) => ({
    displayName: data['displayName'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const statsType2Request = z.object({ displayName: z.string().nullish() }).transform((data) => ({
  displayName: data['displayName'],
}));
