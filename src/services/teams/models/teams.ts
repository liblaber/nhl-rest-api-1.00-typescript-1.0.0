// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { team, teamRequest, teamResponse } from '../../common/team';

/**
 * The shape of the model inside the application code - what the users use
 */
export const teams = z.object({
  copyright: z.string().optional(),
  teams1: z.array(team).optional(),
});

/**
 *
 * @typedef  {Teams} teams
 * @property {string}
 * @property {Team[]}
 */
export type Teams = z.infer<typeof teams>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const teamsResponse = z
  .object({
    copyright: z.string().optional(),
    teams: z.array(teamResponse).optional(),
  })
  .transform((data) => ({
    copyright: data['copyright'],
    teams1: data['teams'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const teamsRequest = z
  .object({ copyright: z.string().nullish(), teams1: z.array(teamRequest).nullish() })
  .transform((data) => ({
    copyright: data['copyright'],
    teams: data['teams1'],
  }));
