// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { teamStatsStats, teamStatsStatsRequest, teamStatsStatsResponse } from './team-stats-stats';

/**
 * The shape of the model inside the application code - what the users use
 */
export const teamStats = z.object({
  copyright: z.string().optional(),
  stats: z.array(teamStatsStats).optional(),
});

/**
 *
 * @typedef  {TeamStats} teamStats
 * @property {string}
 * @property {TeamStatsStats[]}
 */
export type TeamStats = z.infer<typeof teamStats>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const teamStatsResponse = z
  .object({
    copyright: z.string().optional(),
    stats: z.array(teamStatsStatsResponse).optional(),
  })
  .transform((data) => ({
    copyright: data['copyright'],
    stats: data['stats'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const teamStatsRequest = z
  .object({ copyright: z.string().nullish(), stats: z.array(teamStatsStatsRequest).nullish() })
  .transform((data) => ({
    copyright: data['copyright'],
    stats: data['stats'],
  }));
