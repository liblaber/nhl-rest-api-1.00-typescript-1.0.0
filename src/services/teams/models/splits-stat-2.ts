// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const splitsStat2 = z.object({
  gamesPlayed: z.number().optional(),
  wins: z.number().optional(),
  losses: z.number().optional(),
  ot: z.number().optional(),
  pts: z.number().optional(),
  ptPctg: z.string().optional(),
  goalsPerGame: z.number().optional(),
  goalsAgainstPerGame: z.number().optional(),
  evGgaRatio: z.number().optional(),
  powerPlayPercentage: z.string().optional(),
  powerPlayGoals: z.number().optional(),
  powerPlayGoalsAgainst: z.number().optional(),
  powerPlayOpportunities: z.number().optional(),
  penaltyKillPercentage: z.string().optional(),
  shotsPerGame: z.number().optional(),
  shotsAllowed: z.number().optional(),
  winScoreFirst: z.number().optional(),
  winOppScoreFirst: z.number().optional(),
  winLeadFirstPer: z.number().optional(),
  winLeadSecondPer: z.number().optional(),
  winOutshootOpp: z.number().optional(),
  winOutshotByOpp: z.number().optional(),
  faceOffsTaken: z.number().optional(),
  faceOffsWon: z.number().optional(),
  faceOffsLost: z.number().optional(),
  faceOffWinPercentage: z.string().optional(),
  shootingPctg: z.number().optional(),
  savePctg: z.number().optional(),
});

/**
 *
 * @typedef  {SplitsStat2} splitsStat2
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {string}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {string}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {string}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {string}
 * @property {number}
 * @property {number}
 */
export type SplitsStat2 = z.infer<typeof splitsStat2>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const splitsStat2Response = z
  .object({
    gamesPlayed: z.number().optional(),
    wins: z.number().optional(),
    losses: z.number().optional(),
    ot: z.number().optional(),
    pts: z.number().optional(),
    ptPctg: z.string().optional(),
    goalsPerGame: z.number().optional(),
    goalsAgainstPerGame: z.number().optional(),
    evGGARatio: z.number().optional(),
    powerPlayPercentage: z.string().optional(),
    powerPlayGoals: z.number().optional(),
    powerPlayGoalsAgainst: z.number().optional(),
    powerPlayOpportunities: z.number().optional(),
    penaltyKillPercentage: z.string().optional(),
    shotsPerGame: z.number().optional(),
    shotsAllowed: z.number().optional(),
    winScoreFirst: z.number().optional(),
    winOppScoreFirst: z.number().optional(),
    winLeadFirstPer: z.number().optional(),
    winLeadSecondPer: z.number().optional(),
    winOutshootOpp: z.number().optional(),
    winOutshotByOpp: z.number().optional(),
    faceOffsTaken: z.number().optional(),
    faceOffsWon: z.number().optional(),
    faceOffsLost: z.number().optional(),
    faceOffWinPercentage: z.string().optional(),
    shootingPctg: z.number().optional(),
    savePctg: z.number().optional(),
  })
  .transform((data) => ({
    gamesPlayed: data['gamesPlayed'],
    wins: data['wins'],
    losses: data['losses'],
    ot: data['ot'],
    pts: data['pts'],
    ptPctg: data['ptPctg'],
    goalsPerGame: data['goalsPerGame'],
    goalsAgainstPerGame: data['goalsAgainstPerGame'],
    evGgaRatio: data['evGGARatio'],
    powerPlayPercentage: data['powerPlayPercentage'],
    powerPlayGoals: data['powerPlayGoals'],
    powerPlayGoalsAgainst: data['powerPlayGoalsAgainst'],
    powerPlayOpportunities: data['powerPlayOpportunities'],
    penaltyKillPercentage: data['penaltyKillPercentage'],
    shotsPerGame: data['shotsPerGame'],
    shotsAllowed: data['shotsAllowed'],
    winScoreFirst: data['winScoreFirst'],
    winOppScoreFirst: data['winOppScoreFirst'],
    winLeadFirstPer: data['winLeadFirstPer'],
    winLeadSecondPer: data['winLeadSecondPer'],
    winOutshootOpp: data['winOutshootOpp'],
    winOutshotByOpp: data['winOutshotByOpp'],
    faceOffsTaken: data['faceOffsTaken'],
    faceOffsWon: data['faceOffsWon'],
    faceOffsLost: data['faceOffsLost'],
    faceOffWinPercentage: data['faceOffWinPercentage'],
    shootingPctg: data['shootingPctg'],
    savePctg: data['savePctg'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const splitsStat2Request = z
  .object({
    gamesPlayed: z.number().nullish(),
    wins: z.number().nullish(),
    losses: z.number().nullish(),
    ot: z.number().nullish(),
    pts: z.number().nullish(),
    ptPctg: z.string().nullish(),
    goalsPerGame: z.number().nullish(),
    goalsAgainstPerGame: z.number().nullish(),
    evGgaRatio: z.number().nullish(),
    powerPlayPercentage: z.string().nullish(),
    powerPlayGoals: z.number().nullish(),
    powerPlayGoalsAgainst: z.number().nullish(),
    powerPlayOpportunities: z.number().nullish(),
    penaltyKillPercentage: z.string().nullish(),
    shotsPerGame: z.number().nullish(),
    shotsAllowed: z.number().nullish(),
    winScoreFirst: z.number().nullish(),
    winOppScoreFirst: z.number().nullish(),
    winLeadFirstPer: z.number().nullish(),
    winLeadSecondPer: z.number().nullish(),
    winOutshootOpp: z.number().nullish(),
    winOutshotByOpp: z.number().nullish(),
    faceOffsTaken: z.number().nullish(),
    faceOffsWon: z.number().nullish(),
    faceOffsLost: z.number().nullish(),
    faceOffWinPercentage: z.string().nullish(),
    shootingPctg: z.number().nullish(),
    savePctg: z.number().nullish(),
  })
  .transform((data) => ({
    gamesPlayed: data['gamesPlayed'],
    wins: data['wins'],
    losses: data['losses'],
    ot: data['ot'],
    pts: data['pts'],
    ptPctg: data['ptPctg'],
    goalsPerGame: data['goalsPerGame'],
    goalsAgainstPerGame: data['goalsAgainstPerGame'],
    evGGARatio: data['evGgaRatio'],
    powerPlayPercentage: data['powerPlayPercentage'],
    powerPlayGoals: data['powerPlayGoals'],
    powerPlayGoalsAgainst: data['powerPlayGoalsAgainst'],
    powerPlayOpportunities: data['powerPlayOpportunities'],
    penaltyKillPercentage: data['penaltyKillPercentage'],
    shotsPerGame: data['shotsPerGame'],
    shotsAllowed: data['shotsAllowed'],
    winScoreFirst: data['winScoreFirst'],
    winOppScoreFirst: data['winOppScoreFirst'],
    winLeadFirstPer: data['winLeadFirstPer'],
    winLeadSecondPer: data['winLeadSecondPer'],
    winOutshootOpp: data['winOutshootOpp'],
    winOutshotByOpp: data['winOutshotByOpp'],
    faceOffsTaken: data['faceOffsTaken'],
    faceOffsWon: data['faceOffsWon'],
    faceOffsLost: data['faceOffsLost'],
    faceOffWinPercentage: data['faceOffWinPercentage'],
    shootingPctg: data['shootingPctg'],
    savePctg: data['savePctg'],
  }));
