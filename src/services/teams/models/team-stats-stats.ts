// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { statsType2, statsType2Request, statsType2Response } from './stats-type-2';
import { statsSplits2, statsSplits2Request, statsSplits2Response } from './stats-splits-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const teamStatsStats = z.object({
  type_: statsType2.optional(),
  splits: z.array(statsSplits2).optional(),
});

/**
 *
 * @typedef  {TeamStatsStats} teamStatsStats
 * @property {StatsType2}
 * @property {StatsSplits2[]}
 */
export type TeamStatsStats = z.infer<typeof teamStatsStats>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const teamStatsStatsResponse = z
  .object({
    type: statsType2Response.optional(),
    splits: z.array(statsSplits2Response).optional(),
  })
  .transform((data) => ({
    type_: data['type'],
    splits: data['splits'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const teamStatsStatsRequest = z
  .object({ type_: statsType2Request.nullish(), splits: z.array(statsSplits2Request).nullish() })
  .transform((data) => ({
    type: data['type_'],
    splits: data['splits'],
  }));
