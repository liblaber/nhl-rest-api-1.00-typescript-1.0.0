// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { Draft, DraftProspects, draftProspectsResponse, draftResponse } from '../common';

export class DraftService extends BaseService {
  /**
   *
   * @returns {Promise<HttpResponse<Draft>>} OK
   */
  async getDraft(requestConfig?: RequestConfig): Promise<HttpResponse<Draft>> {
    const path = '/draft';
    const options: any = {
      responseSchema: draftResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   *
   * @param {number} year - The draft year.
   * @returns {Promise<HttpResponse<Draft>>} OK
   */
  async getDraftByYear(year: number, requestConfig?: RequestConfig): Promise<HttpResponse<Draft>> {
    const path = this.client.buildPath('/draft/{year}', { year: year });
    const options: any = {
      responseSchema: draftResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * Be forewarned that this endpoint returns a **lot** of data and there does not appear to be a way to paginate results.
   * @returns {Promise<HttpResponse<DraftProspects>>} OK
   */
  async getDraftProspects(requestConfig?: RequestConfig): Promise<HttpResponse<DraftProspects>> {
    const path = '/draft/prospects';
    const options: any = {
      responseSchema: draftProspectsResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   *
   * @param {number} id - The prospect ID.
   * @returns {Promise<HttpResponse<DraftProspects>>} OK
   */
  async getDraftProspect(id: number, requestConfig?: RequestConfig): Promise<HttpResponse<DraftProspects>> {
    const path = this.client.buildPath('/draft/prospects/{id}', { id: id });
    const options: any = {
      responseSchema: draftProspectsResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }
}
