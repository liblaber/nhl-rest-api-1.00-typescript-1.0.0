// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { conference, conferenceRequest, conferenceResponse } from './conference';

/**
 * The shape of the model inside the application code - what the users use
 */
export const conferences = z.object({
  copyright: z.string().optional(),
  teams: z.array(conference).optional(),
});

/**
 *
 * @typedef  {Conferences} conferences
 * @property {string}
 * @property {Conference[]}
 */
export type Conferences = z.infer<typeof conferences>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const conferencesResponse = z
  .object({
    copyright: z.string().optional(),
    teams: z.array(conferenceResponse).optional(),
  })
  .transform((data) => ({
    copyright: data['copyright'],
    teams: data['teams'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const conferencesRequest = z
  .object({ copyright: z.string().nullish(), teams: z.array(conferenceRequest).nullish() })
  .transform((data) => ({
    copyright: data['copyright'],
    teams: data['teams'],
  }));
