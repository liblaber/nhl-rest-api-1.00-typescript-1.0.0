// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { Conferences, conferencesResponse } from './models';
import { Division, divisionResponse } from '../common';

export class ConferencesService extends BaseService {
  /**
   * This only retrieves active conferences. For inactive conferences, use `/conferences/{id}`.
   * @returns {Promise<HttpResponse<Conferences>>} OK
   */
  async getConferences(requestConfig?: RequestConfig): Promise<HttpResponse<Conferences>> {
    const path = '/conferences';
    const options: any = {
      responseSchema: conferencesResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * You can use this to also retrieve inactive conferences. For example, the ID for the World Cup of Hockey is `7`.
   * @param {number} id - The ID of the conference.
   * @returns {Promise<HttpResponse<Division>>} OK
   */
  async getConference(id: number, requestConfig?: RequestConfig): Promise<HttpResponse<Division>> {
    const path = this.client.buildPath('/conferences/{id}', { id: id });
    const options: any = {
      responseSchema: divisionResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }
}
