// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';

export class PlayerService extends BaseService {
  /**
   * Retrieve the game log for a specific player, season, and game type.
   * @param {number} player - Player ID
   * @param {number} season - Season in YYYYYYYY format
   * @param {number} gameType - Game type (2 for regular season, 3 for playoffs)
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getGameLog(
    player: number,
    season: number,
    gameType: number,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const path = this.client.buildPath('/v1/player/{player}/game-log/{season}/{game-type}', {
      player: player,
      season: season,
      'game-type': gameType,
    });
    const options: any = {
      responseSchema: z.any(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
    };
    return this.client.get(path, options);
  }

  /**
   * Retrieve information for a specific player.
   * @param {number} player - Player ID
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getPlayerInfo(player: number, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const path = this.client.buildPath('/v1/player/{player}/landing', { player: player });
    const options: any = {
      responseSchema: z.any(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
    };
    return this.client.get(path, options);
  }

  /**
   * Retrieve the game log for a specific player as of the current moment.
   * @param {number} player - Player ID
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getGameLogCurrent(player: number, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const path = this.client.buildPath('/v1/player/{player}/game-log/now', { player: player });
    const options: any = {
      responseSchema: z.any(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
    };
    return this.client.get(path, options);
  }
}
