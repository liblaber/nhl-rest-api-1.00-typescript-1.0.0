// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { PlayerStats, Players, playerStatsResponse, playersResponse } from './models';
import { GetPlayerStatsParams } from './request-params';

export class PlayersService extends BaseService {
  /**
   *
   * @param {number} id - The ID of the player.
   * @returns {Promise<HttpResponse<Players>>} OK
   */
  async getPlayer(id: number, requestConfig?: RequestConfig): Promise<HttpResponse<Players>> {
    const path = this.client.buildPath('/people/{id}', { id: id });
    const options: any = {
      responseSchema: playersResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
 * 
 * @param {number} id - The ID of the player.
 * @param {GetPlayerStatsStats} stats - Stats explanations:
  * `homeAndAway` - Provides a split between home and away games.
  * `byMonth` - Monthly split of stats.
  * `byDayOfWeek` - Split done by day of the week.
  * `goalsByGameSituation` - Shows number on when goals for a player happened like how many in the shootout, how many in each period, etc.
  * `onPaceRegularSeason` - This only works with the current in-progress season and shows projected totals based on current onPaceRegularSeason.
  * `regularSeasonStatRankings` - Returns where someone stands vs the rest of the league for a specific regularSeasonStatRankings
  * `statsSingleSeason` - Obtains single season statistics for a player.
  * `vsConference` - Conference stats split.
  * `vsDivision` - Division stats split.
  * `vsTeam` - Conference stats split.
  * `winLoss` - Very similar to the previous modifier except it provides the W/L/OT split instead of Home and Away.

 * @param {number} [season] - Return a team's specific season.
 * @returns {Promise<HttpResponse<PlayerStats>>} OK
 */
  async getPlayerStats(
    id: number,
    params: GetPlayerStatsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<PlayerStats>> {
    const path = this.client.buildPath('/people/{id}/stats', { id: id });
    const options: any = {
      responseSchema: playerStatsResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.stats) {
      options.queryParams['stats'] = params?.stats;
    }
    if (params?.season) {
      options.queryParams['season'] = params?.season;
    }
    return this.client.get(path, options);
  }
}
