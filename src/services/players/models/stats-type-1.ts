// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { typeDisplayName } from './type-display-name';

/**
 * The shape of the model inside the application code - what the users use
 */
export const statsType1 = z.object({
  displayName: typeDisplayName.optional(),
});

/**
 *
 * @typedef  {StatsType1} statsType1
 * @property {TypeDisplayName}
 */
export type StatsType1 = z.infer<typeof statsType1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const statsType1Response = z
  .object({
    displayName: typeDisplayName.optional(),
  })
  .transform((data) => ({
    displayName: data['displayName'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const statsType1Request = z.object({ displayName: typeDisplayName.nullish() }).transform((data) => ({
  displayName: data['displayName'],
}));
