// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const splitsStat1 = z.object({
  timeOnIce: z.string().optional(),
  assists: z.string().optional(),
  goals: z.number().optional(),
  pim: z.number().optional(),
  shots: z.number().optional(),
  games: z.number().optional(),
  hits: z.number().optional(),
  powerPlayGoals: z.number().optional(),
  powerPlayPoints: z.number().optional(),
  powerPlayTimeOnIce: z.number().optional(),
  evenTimeOnIce: z.number().optional(),
  penaltyMinutes: z.number().optional(),
  faceOffPct: z.number().optional(),
  shotPct: z.number().optional(),
  gameWinningGoals: z.number().optional(),
  overTimeGoals: z.number().optional(),
  shortHandedGoals: z.number().optional(),
  shortHandedPoints: z.number().optional(),
  shortHandedTimeOnIce: z.string().optional(),
  blocked: z.number().optional(),
  plusMinus: z.number().optional(),
  points: z.number().optional(),
  shifts: z.number().optional(),
  timeOnIcePerGame: z.string().optional(),
  evenTimeOnIcePerGame: z.string().optional(),
  shortHandedTimeOnIcePerGame: z.string().optional(),
  powerPlayTimeOnIcePerGame: z.string().optional(),
  rankPowerPlayGoals: z.string().optional(),
  rankBlockedShots: z.string().optional(),
  rankAssists: z.string().optional(),
  rankShotPct: z.string().optional(),
  rankGoals: z.string().optional(),
  rankHits: z.string().optional(),
  rankPenaltyMinutes: z.string().optional(),
  rankShortHandedGoals: z.string().optional(),
  rankPlusMinus: z.string().optional(),
  rankShots: z.string().optional(),
  rankPoints: z.string().optional(),
  rankOvertimeGoals: z.string().optional(),
  rankGamesPlayed: z.string().optional(),
  goalsInFirstPeriod: z.number().optional(),
  goalsInSecondPeriod: z.number().optional(),
  goalsInThirdPeriod: z.number().optional(),
  goalsTrailingByOne: z.number().optional(),
  goalsTrailingByTwo: z.number().optional(),
  goalsTrailingByThreePlus: z.number().optional(),
  goalsWhenTied: z.number().optional(),
  goalsLeadingByOne: z.number().optional(),
  goalsLeadingByTwo: z.number().optional(),
});

/**
 *
 * @typedef  {SplitsStat1} splitsStat1
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {string}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 */
export type SplitsStat1 = z.infer<typeof splitsStat1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const splitsStat1Response = z
  .object({
    timeOnIce: z.string().optional(),
    assists: z.string().optional(),
    goals: z.number().optional(),
    pim: z.number().optional(),
    shots: z.number().optional(),
    games: z.number().optional(),
    hits: z.number().optional(),
    powerPlayGoals: z.number().optional(),
    powerPlayPoints: z.number().optional(),
    powerPlayTimeOnIce: z.number().optional(),
    evenTimeOnIce: z.number().optional(),
    penaltyMinutes: z.number().optional(),
    faceOffPct: z.number().optional(),
    shotPct: z.number().optional(),
    gameWinningGoals: z.number().optional(),
    overTimeGoals: z.number().optional(),
    shortHandedGoals: z.number().optional(),
    shortHandedPoints: z.number().optional(),
    shortHandedTimeOnIce: z.string().optional(),
    blocked: z.number().optional(),
    plusMinus: z.number().optional(),
    points: z.number().optional(),
    shifts: z.number().optional(),
    timeOnIcePerGame: z.string().optional(),
    evenTimeOnIcePerGame: z.string().optional(),
    shortHandedTimeOnIcePerGame: z.string().optional(),
    powerPlayTimeOnIcePerGame: z.string().optional(),
    rankPowerPlayGoals: z.string().optional(),
    rankBlockedShots: z.string().optional(),
    rankAssists: z.string().optional(),
    rankShotPct: z.string().optional(),
    rankGoals: z.string().optional(),
    rankHits: z.string().optional(),
    rankPenaltyMinutes: z.string().optional(),
    rankShortHandedGoals: z.string().optional(),
    rankPlusMinus: z.string().optional(),
    rankShots: z.string().optional(),
    rankPoints: z.string().optional(),
    rankOvertimeGoals: z.string().optional(),
    rankGamesPlayed: z.string().optional(),
    goalsInFirstPeriod: z.number().optional(),
    goalsInSecondPeriod: z.number().optional(),
    goalsInThirdPeriod: z.number().optional(),
    goalsTrailingByOne: z.number().optional(),
    goalsTrailingByTwo: z.number().optional(),
    goalsTrailingByThreePlus: z.number().optional(),
    goalsWhenTied: z.number().optional(),
    goalsLeadingByOne: z.number().optional(),
    goalsLeadingByTwo: z.number().optional(),
  })
  .transform((data) => ({
    timeOnIce: data['timeOnIce'],
    assists: data['assists'],
    goals: data['goals'],
    pim: data['pim'],
    shots: data['shots'],
    games: data['games'],
    hits: data['hits'],
    powerPlayGoals: data['powerPlayGoals'],
    powerPlayPoints: data['powerPlayPoints'],
    powerPlayTimeOnIce: data['powerPlayTimeOnIce'],
    evenTimeOnIce: data['evenTimeOnIce'],
    penaltyMinutes: data['penaltyMinutes'],
    faceOffPct: data['faceOffPct'],
    shotPct: data['shotPct'],
    gameWinningGoals: data['gameWinningGoals'],
    overTimeGoals: data['overTimeGoals'],
    shortHandedGoals: data['shortHandedGoals'],
    shortHandedPoints: data['shortHandedPoints'],
    shortHandedTimeOnIce: data['shortHandedTimeOnIce'],
    blocked: data['blocked'],
    plusMinus: data['plusMinus'],
    points: data['points'],
    shifts: data['shifts'],
    timeOnIcePerGame: data['timeOnIcePerGame'],
    evenTimeOnIcePerGame: data['evenTimeOnIcePerGame'],
    shortHandedTimeOnIcePerGame: data['shortHandedTimeOnIcePerGame'],
    powerPlayTimeOnIcePerGame: data['powerPlayTimeOnIcePerGame'],
    rankPowerPlayGoals: data['rankPowerPlayGoals'],
    rankBlockedShots: data['rankBlockedShots'],
    rankAssists: data['rankAssists'],
    rankShotPct: data['rankShotPct'],
    rankGoals: data['rankGoals'],
    rankHits: data['rankHits'],
    rankPenaltyMinutes: data['rankPenaltyMinutes'],
    rankShortHandedGoals: data['rankShortHandedGoals'],
    rankPlusMinus: data['rankPlusMinus'],
    rankShots: data['rankShots'],
    rankPoints: data['rankPoints'],
    rankOvertimeGoals: data['rankOvertimeGoals'],
    rankGamesPlayed: data['rankGamesPlayed'],
    goalsInFirstPeriod: data['goalsInFirstPeriod'],
    goalsInSecondPeriod: data['goalsInSecondPeriod'],
    goalsInThirdPeriod: data['goalsInThirdPeriod'],
    goalsTrailingByOne: data['goalsTrailingByOne'],
    goalsTrailingByTwo: data['goalsTrailingByTwo'],
    goalsTrailingByThreePlus: data['goalsTrailingByThreePlus'],
    goalsWhenTied: data['goalsWhenTied'],
    goalsLeadingByOne: data['goalsLeadingByOne'],
    goalsLeadingByTwo: data['goalsLeadingByTwo'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const splitsStat1Request = z
  .object({
    timeOnIce: z.string().nullish(),
    assists: z.string().nullish(),
    goals: z.number().nullish(),
    pim: z.number().nullish(),
    shots: z.number().nullish(),
    games: z.number().nullish(),
    hits: z.number().nullish(),
    powerPlayGoals: z.number().nullish(),
    powerPlayPoints: z.number().nullish(),
    powerPlayTimeOnIce: z.number().nullish(),
    evenTimeOnIce: z.number().nullish(),
    penaltyMinutes: z.number().nullish(),
    faceOffPct: z.number().nullish(),
    shotPct: z.number().nullish(),
    gameWinningGoals: z.number().nullish(),
    overTimeGoals: z.number().nullish(),
    shortHandedGoals: z.number().nullish(),
    shortHandedPoints: z.number().nullish(),
    shortHandedTimeOnIce: z.string().nullish(),
    blocked: z.number().nullish(),
    plusMinus: z.number().nullish(),
    points: z.number().nullish(),
    shifts: z.number().nullish(),
    timeOnIcePerGame: z.string().nullish(),
    evenTimeOnIcePerGame: z.string().nullish(),
    shortHandedTimeOnIcePerGame: z.string().nullish(),
    powerPlayTimeOnIcePerGame: z.string().nullish(),
    rankPowerPlayGoals: z.string().nullish(),
    rankBlockedShots: z.string().nullish(),
    rankAssists: z.string().nullish(),
    rankShotPct: z.string().nullish(),
    rankGoals: z.string().nullish(),
    rankHits: z.string().nullish(),
    rankPenaltyMinutes: z.string().nullish(),
    rankShortHandedGoals: z.string().nullish(),
    rankPlusMinus: z.string().nullish(),
    rankShots: z.string().nullish(),
    rankPoints: z.string().nullish(),
    rankOvertimeGoals: z.string().nullish(),
    rankGamesPlayed: z.string().nullish(),
    goalsInFirstPeriod: z.number().nullish(),
    goalsInSecondPeriod: z.number().nullish(),
    goalsInThirdPeriod: z.number().nullish(),
    goalsTrailingByOne: z.number().nullish(),
    goalsTrailingByTwo: z.number().nullish(),
    goalsTrailingByThreePlus: z.number().nullish(),
    goalsWhenTied: z.number().nullish(),
    goalsLeadingByOne: z.number().nullish(),
    goalsLeadingByTwo: z.number().nullish(),
  })
  .transform((data) => ({
    timeOnIce: data['timeOnIce'],
    assists: data['assists'],
    goals: data['goals'],
    pim: data['pim'],
    shots: data['shots'],
    games: data['games'],
    hits: data['hits'],
    powerPlayGoals: data['powerPlayGoals'],
    powerPlayPoints: data['powerPlayPoints'],
    powerPlayTimeOnIce: data['powerPlayTimeOnIce'],
    evenTimeOnIce: data['evenTimeOnIce'],
    penaltyMinutes: data['penaltyMinutes'],
    faceOffPct: data['faceOffPct'],
    shotPct: data['shotPct'],
    gameWinningGoals: data['gameWinningGoals'],
    overTimeGoals: data['overTimeGoals'],
    shortHandedGoals: data['shortHandedGoals'],
    shortHandedPoints: data['shortHandedPoints'],
    shortHandedTimeOnIce: data['shortHandedTimeOnIce'],
    blocked: data['blocked'],
    plusMinus: data['plusMinus'],
    points: data['points'],
    shifts: data['shifts'],
    timeOnIcePerGame: data['timeOnIcePerGame'],
    evenTimeOnIcePerGame: data['evenTimeOnIcePerGame'],
    shortHandedTimeOnIcePerGame: data['shortHandedTimeOnIcePerGame'],
    powerPlayTimeOnIcePerGame: data['powerPlayTimeOnIcePerGame'],
    rankPowerPlayGoals: data['rankPowerPlayGoals'],
    rankBlockedShots: data['rankBlockedShots'],
    rankAssists: data['rankAssists'],
    rankShotPct: data['rankShotPct'],
    rankGoals: data['rankGoals'],
    rankHits: data['rankHits'],
    rankPenaltyMinutes: data['rankPenaltyMinutes'],
    rankShortHandedGoals: data['rankShortHandedGoals'],
    rankPlusMinus: data['rankPlusMinus'],
    rankShots: data['rankShots'],
    rankPoints: data['rankPoints'],
    rankOvertimeGoals: data['rankOvertimeGoals'],
    rankGamesPlayed: data['rankGamesPlayed'],
    goalsInFirstPeriod: data['goalsInFirstPeriod'],
    goalsInSecondPeriod: data['goalsInSecondPeriod'],
    goalsInThirdPeriod: data['goalsInThirdPeriod'],
    goalsTrailingByOne: data['goalsTrailingByOne'],
    goalsTrailingByTwo: data['goalsTrailingByTwo'],
    goalsTrailingByThreePlus: data['goalsTrailingByThreePlus'],
    goalsWhenTied: data['goalsWhenTied'],
    goalsLeadingByOne: data['goalsLeadingByOne'],
    goalsLeadingByTwo: data['goalsLeadingByTwo'],
  }));
