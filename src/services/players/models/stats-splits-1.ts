// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { splitsStat1, splitsStat1Request, splitsStat1Response } from './splits-stat-1';
import { opponent, opponentRequest, opponentResponse } from './opponent';
import { opponentDivision, opponentDivisionRequest, opponentDivisionResponse } from './opponent-division';
import { opponentConference, opponentConferenceRequest, opponentConferenceResponse } from './opponent-conference';

/**
 * The shape of the model inside the application code - what the users use
 */
export const statsSplits1 = z.object({
  season: z.string().optional(),
  stat: splitsStat1.optional(),
  isHome: z.boolean().optional(),
  isWin: z.boolean().optional(),
  isOt: z.boolean().optional(),
  month: z.number().optional(),
  dayOfWeek: z.number().optional(),
  opponent: opponent.optional(),
  opponentDivision: opponentDivision.optional(),
  opponentConference: opponentConference.optional(),
});

/**
 *
 * @typedef  {StatsSplits1} statsSplits1
 * @property {string}
 * @property {SplitsStat1}
 * @property {boolean}
 * @property {boolean}
 * @property {boolean}
 * @property {number}
 * @property {number}
 * @property {Opponent}
 * @property {OpponentDivision}
 * @property {OpponentConference}
 */
export type StatsSplits1 = z.infer<typeof statsSplits1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const statsSplits1Response = z
  .object({
    season: z.string().optional(),
    stat: splitsStat1Response.optional(),
    isHome: z.boolean().optional(),
    isWin: z.boolean().optional(),
    isOT: z.boolean().optional(),
    month: z.number().optional(),
    dayOfWeek: z.number().optional(),
    opponent: opponentResponse.optional(),
    opponentDivision: opponentDivisionResponse.optional(),
    opponentConference: opponentConferenceResponse.optional(),
  })
  .transform((data) => ({
    season: data['season'],
    stat: data['stat'],
    isHome: data['isHome'],
    isWin: data['isWin'],
    isOt: data['isOT'],
    month: data['month'],
    dayOfWeek: data['dayOfWeek'],
    opponent: data['opponent'],
    opponentDivision: data['opponentDivision'],
    opponentConference: data['opponentConference'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const statsSplits1Request = z
  .object({
    season: z.string().nullish(),
    stat: splitsStat1Request.nullish(),
    isHome: z.boolean().nullish(),
    isWin: z.boolean().nullish(),
    isOt: z.boolean().nullish(),
    month: z.number().nullish(),
    dayOfWeek: z.number().nullish(),
    opponent: opponentRequest.nullish(),
    opponentDivision: opponentDivisionRequest.nullish(),
    opponentConference: opponentConferenceRequest.nullish(),
  })
  .transform((data) => ({
    season: data['season'],
    stat: data['stat'],
    isHome: data['isHome'],
    isWin: data['isWin'],
    isOT: data['isOt'],
    month: data['month'],
    dayOfWeek: data['dayOfWeek'],
    opponent: data['opponent'],
    opponentDivision: data['opponentDivision'],
    opponentConference: data['opponentConference'],
  }));
