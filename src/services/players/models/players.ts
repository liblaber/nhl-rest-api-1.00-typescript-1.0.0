// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { player, playerRequest, playerResponse } from '../../common/player';

/**
 * The shape of the model inside the application code - what the users use
 */
export const players = z.object({
  copyright: z.string(),
  teams: z.array(player).optional(),
});

/**
 *
 * @typedef  {Players} players
 * @property {string}
 * @property {Player[]}
 */
export type Players = z.infer<typeof players>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const playersResponse = z
  .object({
    copyright: z.string(),
    teams: z.array(playerResponse).optional(),
  })
  .transform((data) => ({
    copyright: data['copyright'],
    teams: data['teams'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const playersRequest = z
  .object({ copyright: z.string().nullish(), teams: z.array(playerRequest).nullish() })
  .transform((data) => ({
    copyright: data['copyright'],
    teams: data['teams'],
  }));
