// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { statsType1, statsType1Request, statsType1Response } from './stats-type-1';
import { statsSplits1, statsSplits1Request, statsSplits1Response } from './stats-splits-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const playerStatsStats = z.object({
  type_: statsType1.optional(),
  splits: z.array(statsSplits1).optional(),
});

/**
 *
 * @typedef  {PlayerStatsStats} playerStatsStats
 * @property {StatsType1}
 * @property {StatsSplits1[]}
 */
export type PlayerStatsStats = z.infer<typeof playerStatsStats>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const playerStatsStatsResponse = z
  .object({
    type: statsType1Response.optional(),
    splits: z.array(statsSplits1Response).optional(),
  })
  .transform((data) => ({
    type_: data['type'],
    splits: data['splits'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const playerStatsStatsRequest = z
  .object({ type_: statsType1Request.nullish(), splits: z.array(statsSplits1Request).nullish() })
  .transform((data) => ({
    type: data['type_'],
    splits: data['splits'],
  }));
