// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { Request } from '../../http/transport/request';

export class RosterService extends BaseService {
  /**
   * Retrieve the roster for a specific team as of the current moment.
   * @param {string} team - Three-letter team code
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getCurrentTeamRoster(team: string, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new Request({
      method: 'GET',
      path: '/v1/roster/{team}/current',
      config: this.config,
      responseSchema: z.any(),
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('team', team);
    return this.client.call(request);
  }

  /**
   * Retrieve the roster for a specific team and season.
   * @param {string} team - Three-letter team code
   * @param {number} season - Season in YYYYYYYY format
   * @returns {Promise<HttpResponse<any>>} Successful response
   */
  async getTeamRosterBySeason(team: string, season: number, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new Request({
      method: 'GET',
      path: '/v1/roster/{team}/{season}',
      config: this.config,
      responseSchema: z.any(),
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('team', team);
    request.addPathParam('season', season);
    return this.client.call(request);
  }
}
