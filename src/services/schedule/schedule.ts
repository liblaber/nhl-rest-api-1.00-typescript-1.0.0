// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { Schedule, scheduleResponse } from './models';
import { GetScheduleParams } from './request-params';

export class ScheduleService extends BaseService {
  /**
 * 
 * @param {GetScheduleExpand} [expand] - Expand explanations:
  * `schedule.brodcasts` - Shows the broadcasts of the game.
  * `schedule.linescore` - Linescore for completed games.
  * `schedule.ticket` - Provides the different places to buy tickets for the upcoming games.
  * `team.schedule.previous` - Same as above but for the last game played.

 * @param {string} [teamId] - Limit results to a specific team. Team ids can be found through the teams endpoint
 * @param {string} [startDate] - Start date for the search.
 * @param {string} [endDate] - End date for the search.
 * @returns {Promise<HttpResponse<Schedule>>} OK
 */
  async getSchedule(params?: GetScheduleParams, requestConfig?: RequestConfig): Promise<HttpResponse<Schedule>> {
    const path = '/schedule';
    const options: any = {
      responseSchema: scheduleResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.expand) {
      options.queryParams['expand'] = params?.expand;
    }
    if (params?.teamId) {
      options.queryParams['teamId'] = params?.teamId;
    }
    if (params?.startDate) {
      options.queryParams['startDate'] = params?.startDate;
    }
    if (params?.endDate) {
      options.queryParams['endDate'] = params?.endDate;
    }
    return this.client.get(path, options);
  }
}
