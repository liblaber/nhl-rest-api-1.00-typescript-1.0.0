// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { homeLeagueRecord2, homeLeagueRecord2Request, homeLeagueRecord2Response } from './home-league-record-2';
import { homeTeam2, homeTeam2Request, homeTeam2Response } from './home-team-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const teamsHome2 = z.object({
  leagueRecord: homeLeagueRecord2.optional(),
  score: z.number().optional(),
  team: homeTeam2.optional(),
});

/**
 *
 * @typedef  {TeamsHome2} teamsHome2
 * @property {HomeLeagueRecord2}
 * @property {number}
 * @property {HomeTeam2}
 */
export type TeamsHome2 = z.infer<typeof teamsHome2>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const teamsHome2Response = z
  .object({
    leagueRecord: homeLeagueRecord2Response.optional(),
    score: z.number().optional(),
    team: homeTeam2Response.optional(),
  })
  .transform((data) => ({
    leagueRecord: data['leagueRecord'],
    score: data['score'],
    team: data['team'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const teamsHome2Request = z
  .object({
    leagueRecord: homeLeagueRecord2Request.nullish(),
    score: z.number().nullish(),
    team: homeTeam2Request.nullish(),
  })
  .transform((data) => ({
    leagueRecord: data['leagueRecord'],
    score: data['score'],
    team: data['team'],
  }));
