// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { teamsAway2, teamsAway2Request, teamsAway2Response } from './teams-away-2';
import { teamsHome2, teamsHome2Request, teamsHome2Response } from './teams-home-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const scheduleGameTeams = z.object({
  away: teamsAway2.optional(),
  home: teamsHome2.optional(),
});

/**
 *
 * @typedef  {ScheduleGameTeams} scheduleGameTeams
 * @property {TeamsAway2}
 * @property {TeamsHome2}
 */
export type ScheduleGameTeams = z.infer<typeof scheduleGameTeams>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const scheduleGameTeamsResponse = z
  .object({
    away: teamsAway2Response.optional(),
    home: teamsHome2Response.optional(),
  })
  .transform((data) => ({
    away: data['away'],
    home: data['home'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const scheduleGameTeamsRequest = z
  .object({ away: teamsAway2Request.nullish(), home: teamsHome2Request.nullish() })
  .transform((data) => ({
    away: data['away'],
    home: data['home'],
  }));
