// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { scheduleGameStatus, scheduleGameStatusRequest, scheduleGameStatusResponse } from './schedule-game-status';
import { scheduleGameTeams, scheduleGameTeamsRequest, scheduleGameTeamsResponse } from './schedule-game-teams';
import { gameLinescore, gameLinescoreRequest, gameLinescoreResponse } from '../../common/game-linescore';
import { scheduleGameVenue, scheduleGameVenueRequest, scheduleGameVenueResponse } from './schedule-game-venue';
import { tickets, ticketsRequest, ticketsResponse } from './tickets';
import { scheduleGameContent, scheduleGameContentRequest, scheduleGameContentResponse } from './schedule-game-content';

/**
 * The shape of the model inside the application code - what the users use
 */
export const scheduleGame = z.object({
  gamePk: z.number().optional(),
  link: z.string().optional(),
  gameType: z.string().optional(),
  season: z.string().optional(),
  gameDate: z.string().optional(),
  status: scheduleGameStatus.optional(),
  teams: scheduleGameTeams.optional(),
  linescore: gameLinescore.optional(),
  venue: scheduleGameVenue.optional(),
  tickets: z.array(tickets).optional(),
  content: scheduleGameContent.optional(),
});

/**
 *
 * @typedef  {ScheduleGame} scheduleGame
 * @property {number}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {ScheduleGameStatus}
 * @property {ScheduleGameTeams}
 * @property {GameLinescore}
 * @property {ScheduleGameVenue}
 * @property {Tickets[]}
 * @property {ScheduleGameContent}
 */
export type ScheduleGame = z.infer<typeof scheduleGame>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const scheduleGameResponse = z
  .object({
    gamePk: z.number().optional(),
    link: z.string().optional(),
    gameType: z.string().optional(),
    season: z.string().optional(),
    gameDate: z.string().optional(),
    status: scheduleGameStatusResponse.optional(),
    teams: scheduleGameTeamsResponse.optional(),
    linescore: gameLinescoreResponse.optional(),
    venue: scheduleGameVenueResponse.optional(),
    tickets: z.array(ticketsResponse).optional(),
    content: scheduleGameContentResponse.optional(),
  })
  .transform((data) => ({
    gamePk: data['gamePk'],
    link: data['link'],
    gameType: data['gameType'],
    season: data['season'],
    gameDate: data['gameDate'],
    status: data['status'],
    teams: data['teams'],
    linescore: data['linescore'],
    venue: data['venue'],
    tickets: data['tickets'],
    content: data['content'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const scheduleGameRequest = z
  .object({
    gamePk: z.number().nullish(),
    link: z.string().nullish(),
    gameType: z.string().nullish(),
    season: z.string().nullish(),
    gameDate: z.string().nullish(),
    status: scheduleGameStatusRequest.nullish(),
    teams: scheduleGameTeamsRequest.nullish(),
    linescore: gameLinescoreRequest.nullish(),
    venue: scheduleGameVenueRequest.nullish(),
    tickets: z.array(ticketsRequest).nullish(),
    content: scheduleGameContentRequest.nullish(),
  })
  .transform((data) => ({
    gamePk: data['gamePk'],
    link: data['link'],
    gameType: data['gameType'],
    season: data['season'],
    gameDate: data['gameDate'],
    status: data['status'],
    teams: data['teams'],
    linescore: data['linescore'],
    venue: data['venue'],
    tickets: data['tickets'],
    content: data['content'],
  }));
