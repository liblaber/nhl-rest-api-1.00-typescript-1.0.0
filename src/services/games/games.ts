// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { GameBoxscores, GameContent, gameBoxscoresResponse, gameContentResponse } from './models';
import { Game, gameResponse } from '../common';
import { GetGameDiffParams } from './request-params';

export class GamesService extends BaseService {
  /**
   * If you want detailed play information, you should use `/game/{id}/feed/live` or `/game/{id}/feed/live/diffPatch`.
   * @param {number} id - The ID of the game. The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams). For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).
   * @returns {Promise<HttpResponse<GameBoxscores>>} OK
   */
  async getGameBoxscore(id: number, requestConfig?: RequestConfig): Promise<HttpResponse<GameBoxscores>> {
    const path = this.client.buildPath('/game/{id}/boxscore', { id: id });
    const options: any = {
      responseSchema: gameBoxscoresResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   *
   * @param {number} id - The ID of the game. The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams). For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).
   * @returns {Promise<HttpResponse<GameContent>>} OK
   */
  async getGameContent(id: number, requestConfig?: RequestConfig): Promise<HttpResponse<GameContent>> {
    const path = this.client.buildPath('/game/{id}/content', { id: id });
    const options: any = {
      responseSchema: gameContentResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * This contains all data related to a game, from the boxscore, to play data and even on-ice coordinates. Be forewarned that, depending on the game, this endpoint can return a **lot** of data.
   * @param {number} id - The ID of the game. The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams). For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).
   * @returns {Promise<HttpResponse<Game>>} OK
   */
  async getGame(id: number, requestConfig?: RequestConfig): Promise<HttpResponse<Game>> {
    const path = this.client.buildPath('/game/{id}/feed/live', { id: id });
    const options: any = {
      responseSchema: gameResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * You can use this to return a small subset of data relating to game.
   * @param {number} id - The ID of the game. The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 = preseason, 02 = regular season, 03 = playoffs, 04 = all-star. The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams). For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).
   * @param {string} startTimeCode - The prospect ID.
   * @returns {Promise<HttpResponse<Game>>} OK
   */
  async getGameDiff(id: number, params: GetGameDiffParams, requestConfig?: RequestConfig): Promise<HttpResponse<Game>> {
    const path = this.client.buildPath('/game/{id}/feed/live/diffPatch', { id: id });
    const options: any = {
      responseSchema: gameResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.startTimeCode) {
      options.queryParams['startTimeCode'] = params?.startTimeCode;
    }
    return this.client.get(path, options);
  }
}
