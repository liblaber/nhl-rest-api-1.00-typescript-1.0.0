// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { gameBoxscoresTeams, gameBoxscoresTeamsRequest, gameBoxscoresTeamsResponse } from './game-boxscores-teams';
import { gameOfficial, gameOfficialRequest, gameOfficialResponse } from '../../common/game-official';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gameBoxscores = z.object({
  copyright: z.string().optional(),
  teams: gameBoxscoresTeams.optional(),
  officials: z.array(gameOfficial).optional(),
});

/**
 *
 * @typedef  {GameBoxscores} gameBoxscores
 * @property {string}
 * @property {GameBoxscoresTeams}
 * @property {GameOfficial[]}
 */
export type GameBoxscores = z.infer<typeof gameBoxscores>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gameBoxscoresResponse = z
  .object({
    copyright: z.string().optional(),
    teams: gameBoxscoresTeamsResponse.optional(),
    officials: z.array(gameOfficialResponse).optional(),
  })
  .transform((data) => ({
    copyright: data['copyright'],
    teams: data['teams'],
    officials: data['officials'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gameBoxscoresRequest = z
  .object({
    copyright: z.string().nullish(),
    teams: gameBoxscoresTeamsRequest.nullish(),
    officials: z.array(gameOfficialRequest).nullish(),
  })
  .transform((data) => ({
    copyright: data['copyright'],
    teams: data['teams'],
    officials: data['officials'],
  }));
