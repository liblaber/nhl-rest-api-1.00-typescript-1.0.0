// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { milestones, milestonesRequest, milestonesResponse } from './milestones';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gameContentMedia = z.object({
  epg: z.array(z.any()).optional(),
  milestones: milestones.optional(),
});

/**
 *
 * @typedef  {GameContentMedia} gameContentMedia
 * @property {any[]}
 * @property {Milestones}
 */
export type GameContentMedia = z.infer<typeof gameContentMedia>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gameContentMediaResponse = z
  .object({
    epg: z.array(z.any()).optional(),
    milestones: milestonesResponse.optional(),
  })
  .transform((data) => ({
    epg: data['epg'],
    milestones: data['milestones'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gameContentMediaRequest = z
  .object({ epg: z.array(z.any()).nullish(), milestones: milestonesRequest.nullish() })
  .transform((data) => ({
    epg: data['epg'],
    milestones: data['milestones'],
  }));
