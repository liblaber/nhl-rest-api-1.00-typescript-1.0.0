// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { itemsType } from './items-type';
import { gameHighlight, gameHighlightRequest, gameHighlightResponse } from '../../common/game-highlight';

/**
 * The shape of the model inside the application code - what the users use
 */
export const items = z.object({
  title1: z.string().optional(),
  description: z.string().optional(),
  type_: itemsType.optional(),
  timeAbsolute: z.string().optional(),
  timeOffset: z.string().optional(),
  period: z.string().optional(),
  statsEventId: z.string().optional(),
  teamId: z.string().optional(),
  playerId: z.string().optional(),
  periodTime: z.string().optional(),
  ordinalNum: z.string().optional(),
  highlight: gameHighlight.optional(),
});

/**
 *
 * @typedef  {Items} items
 * @property {string}
 * @property {string}
 * @property {ItemsType}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {GameHighlight}
 */
export type Items = z.infer<typeof items>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const itemsResponse = z
  .object({
    title: z.string().optional(),
    description: z.string().optional(),
    type: itemsType.optional(),
    timeAbsolute: z.string().optional(),
    timeOffset: z.string().optional(),
    period: z.string().optional(),
    statsEventId: z.string().optional(),
    teamId: z.string().optional(),
    playerId: z.string().optional(),
    periodTime: z.string().optional(),
    ordinalNum: z.string().optional(),
    highlight: gameHighlightResponse.optional(),
  })
  .transform((data) => ({
    title1: data['title'],
    description: data['description'],
    type_: data['type'],
    timeAbsolute: data['timeAbsolute'],
    timeOffset: data['timeOffset'],
    period: data['period'],
    statsEventId: data['statsEventId'],
    teamId: data['teamId'],
    playerId: data['playerId'],
    periodTime: data['periodTime'],
    ordinalNum: data['ordinalNum'],
    highlight: data['highlight'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const itemsRequest = z
  .object({
    title1: z.string().nullish(),
    description: z.string().nullish(),
    type_: itemsType.nullish(),
    timeAbsolute: z.string().nullish(),
    timeOffset: z.string().nullish(),
    period: z.string().nullish(),
    statsEventId: z.string().nullish(),
    teamId: z.string().nullish(),
    playerId: z.string().nullish(),
    periodTime: z.string().nullish(),
    ordinalNum: z.string().nullish(),
    highlight: gameHighlightRequest.nullish(),
  })
  .transform((data) => ({
    title: data['title1'],
    description: data['description'],
    type: data['type_'],
    timeAbsolute: data['timeAbsolute'],
    timeOffset: data['timeOffset'],
    period: data['period'],
    statsEventId: data['statsEventId'],
    teamId: data['teamId'],
    playerId: data['playerId'],
    periodTime: data['periodTime'],
    ordinalNum: data['ordinalNum'],
    highlight: data['highlight'],
  }));
