// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { editorial, editorialRequest, editorialResponse } from './editorial';
import { gameContentMedia, gameContentMediaRequest, gameContentMediaResponse } from './game-content-media';
import { highlights, highlightsRequest, highlightsResponse } from './highlights';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gameContent = z.object({
  copyright: z.string().optional(),
  link: z.string().optional(),
  editorial: editorial.optional(),
  media: gameContentMedia.optional(),
  highlights: highlights.optional(),
});

/**
 *
 * @typedef  {GameContent} gameContent
 * @property {string}
 * @property {string}
 * @property {Editorial}
 * @property {GameContentMedia}
 * @property {Highlights}
 */
export type GameContent = z.infer<typeof gameContent>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gameContentResponse = z
  .object({
    copyright: z.string().optional(),
    link: z.string().optional(),
    editorial: editorialResponse.optional(),
    media: gameContentMediaResponse.optional(),
    highlights: highlightsResponse.optional(),
  })
  .transform((data) => ({
    copyright: data['copyright'],
    link: data['link'],
    editorial: data['editorial'],
    media: data['media'],
    highlights: data['highlights'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gameContentRequest = z
  .object({
    copyright: z.string().nullish(),
    link: z.string().nullish(),
    editorial: editorialRequest.nullish(),
    media: gameContentMediaRequest.nullish(),
    highlights: highlightsRequest.nullish(),
  })
  .transform((data) => ({
    copyright: data['copyright'],
    link: data['link'],
    editorial: data['editorial'],
    media: data['media'],
    highlights: data['highlights'],
  }));
