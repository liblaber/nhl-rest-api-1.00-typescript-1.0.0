// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { title } from './title';
import { items, itemsRequest, itemsResponse } from './items';

/**
 * The shape of the model inside the application code - what the users use
 */
export const milestones = z.object({
  title: title.optional(),
  streamStart: z.string().optional(),
  items: z.array(items).optional(),
});

/**
 *
 * @typedef  {Milestones} milestones
 * @property {Title}
 * @property {string}
 * @property {Items[]}
 */
export type Milestones = z.infer<typeof milestones>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const milestonesResponse = z
  .object({
    title: title.optional(),
    streamStart: z.string().optional(),
    items: z.array(itemsResponse).optional(),
  })
  .transform((data) => ({
    title: data['title'],
    streamStart: data['streamStart'],
    items: data['items'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const milestonesRequest = z
  .object({ title: title.nullish(), streamStart: z.string().nullish(), items: z.array(itemsRequest).nullish() })
  .transform((data) => ({
    title: data['title'],
    streamStart: data['streamStart'],
    items: data['items'],
  }));
