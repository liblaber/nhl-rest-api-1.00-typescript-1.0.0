// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { gameEditorials, gameEditorialsRequest, gameEditorialsResponse } from '../../common/game-editorials';

/**
 * The shape of the model inside the application code - what the users use
 */
export const editorial = z.object({
  preview: gameEditorials.optional(),
  articles: gameEditorials.optional(),
  recap: gameEditorials.optional(),
});

/**
 *
 * @typedef  {Editorial} editorial
 * @property {GameEditorials}
 * @property {GameEditorials}
 * @property {GameEditorials}
 */
export type Editorial = z.infer<typeof editorial>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const editorialResponse = z
  .object({
    preview: gameEditorialsResponse.optional(),
    articles: gameEditorialsResponse.optional(),
    recap: gameEditorialsResponse.optional(),
  })
  .transform((data) => ({
    preview: data['preview'],
    articles: data['articles'],
    recap: data['recap'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const editorialRequest = z
  .object({
    preview: gameEditorialsRequest.nullish(),
    articles: gameEditorialsRequest.nullish(),
    recap: gameEditorialsRequest.nullish(),
  })
  .transform((data) => ({
    preview: data['preview'],
    articles: data['articles'],
    recap: data['recap'],
  }));
