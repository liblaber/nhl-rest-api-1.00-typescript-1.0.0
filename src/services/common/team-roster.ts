// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { roster, rosterRequest, rosterResponse } from './roster';

/**
 * The shape of the model inside the application code - what the users use
 */
export const teamRoster = z.object({
  roster: z.array(roster).optional(),
});

/**
 *
 * @typedef  {TeamRoster} teamRoster
 * @property {Roster[]}
 */
export type TeamRoster = z.infer<typeof teamRoster>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const teamRosterResponse = z
  .object({
    roster: z.array(rosterResponse).optional(),
  })
  .transform((data) => ({
    roster: data['roster'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const teamRosterRequest = z.object({ roster: z.array(rosterRequest).nullish() }).transform((data) => ({
  roster: data['roster'],
}));
