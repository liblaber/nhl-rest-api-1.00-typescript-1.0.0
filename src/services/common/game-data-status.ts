// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gameDataStatus = z.object({
  abstractGameState: z.string().optional(),
  codedGameState: z.string().optional(),
  detailedState: z.string().optional(),
  statusCode: z.string().optional(),
  startTimeTbd: z.boolean().optional(),
});

/**
 *
 * @typedef  {GameDataStatus} gameDataStatus
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {boolean}
 */
export type GameDataStatus = z.infer<typeof gameDataStatus>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gameDataStatusResponse = z
  .object({
    abstractGameState: z.string().optional(),
    codedGameState: z.string().optional(),
    detailedState: z.string().optional(),
    statusCode: z.string().optional(),
    startTimeTBD: z.boolean().optional(),
  })
  .transform((data) => ({
    abstractGameState: data['abstractGameState'],
    codedGameState: data['codedGameState'],
    detailedState: data['detailedState'],
    statusCode: data['statusCode'],
    startTimeTbd: data['startTimeTBD'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gameDataStatusRequest = z
  .object({
    abstractGameState: z.string().nullish(),
    codedGameState: z.string().nullish(),
    detailedState: z.string().nullish(),
    statusCode: z.string().nullish(),
    startTimeTbd: z.boolean().nullish(),
  })
  .transform((data) => ({
    abstractGameState: data['abstractGameState'],
    codedGameState: data['codedGameState'],
    detailedState: data['detailedState'],
    statusCode: data['statusCode'],
    startTimeTBD: data['startTimeTbd'],
  }));
