// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { cuts, cutsRequest, cutsResponse } from './cuts';

/**
 * The shape of the model inside the application code - what the users use
 */
export const photo = z.object({
  title: z.string().optional(),
  altText: z.string().optional(),
  cuts: cuts.optional(),
});

/**
 *
 * @typedef  {Photo} photo
 * @property {string}
 * @property {string}
 * @property {Cuts}
 */
export type Photo = z.infer<typeof photo>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const photoResponse = z
  .object({
    title: z.string().optional(),
    altText: z.string().optional(),
    cuts: cutsResponse.optional(),
  })
  .transform((data) => ({
    title: data['title'],
    altText: data['altText'],
    cuts: data['cuts'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const photoRequest = z
  .object({ title: z.string().nullish(), altText: z.string().nullish(), cuts: cutsRequest.nullish() })
  .transform((data) => ({
    title: data['title'],
    altText: data['altText'],
    cuts: data['cuts'],
  }));
