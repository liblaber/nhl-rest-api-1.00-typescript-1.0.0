// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { homeLeagueRecord1, homeLeagueRecord1Request, homeLeagueRecord1Response } from './home-league-record-1';
import { homeTeam1, homeTeam1Request, homeTeam1Response } from './home-team-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const teamsHome1 = z.object({
  leagueRecord: homeLeagueRecord1.optional(),
  score: z.number().optional(),
  team1: homeTeam1.optional(),
});

/**
 *
 * @typedef  {TeamsHome1} teamsHome1
 * @property {HomeLeagueRecord1}
 * @property {number}
 * @property {HomeTeam1}
 */
export type TeamsHome1 = z.infer<typeof teamsHome1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const teamsHome1Response = z
  .object({
    leagueRecord: homeLeagueRecord1Response.optional(),
    score: z.number().optional(),
    team: homeTeam1Response.optional(),
  })
  .transform((data) => ({
    leagueRecord: data['leagueRecord'],
    score: data['score'],
    team1: data['team'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const teamsHome1Request = z
  .object({
    leagueRecord: homeLeagueRecord1Request.nullish(),
    score: z.number().nullish(),
    team1: homeTeam1Request.nullish(),
  })
  .transform((data) => ({
    leagueRecord: data['leagueRecord'],
    score: data['score'],
    team: data['team1'],
  }));
