// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gamePeriodAway = z.object({
  goals1: z.number().optional(),
  shotsOnGoal: z.number().optional(),
  rinkSide: z.string().optional(),
});

/**
 *
 * @typedef  {GamePeriodAway} gamePeriodAway
 * @property {number}
 * @property {number}
 * @property {string}
 */
export type GamePeriodAway = z.infer<typeof gamePeriodAway>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gamePeriodAwayResponse = z
  .object({
    goals: z.number().optional(),
    shotsOnGoal: z.number().optional(),
    rinkSide: z.string().optional(),
  })
  .transform((data) => ({
    goals1: data['goals'],
    shotsOnGoal: data['shotsOnGoal'],
    rinkSide: data['rinkSide'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gamePeriodAwayRequest = z
  .object({ goals1: z.number().nullish(), shotsOnGoal: z.number().nullish(), rinkSide: z.string().nullish() })
  .transform((data) => ({
    goals: data['goals1'],
    shotsOnGoal: data['shotsOnGoal'],
    rinkSide: data['rinkSide'],
  }));
