// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { gameHighlightType1 } from './game-highlight-type-1';
import {
  gameEditorialKeyword,
  gameEditorialKeywordRequest,
  gameEditorialKeywordResponse,
} from './game-editorial-keyword';
import { photo, photoRequest, photoResponse } from './photo';
import { playbacks, playbacksRequest, playbacksResponse } from './playbacks';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gameHighlight = z.object({
  type_: gameHighlightType1.optional(),
  id: z.string().optional(),
  date: z.string().optional(),
  title1: z.string().optional(),
  blurb: z.string().optional(),
  description: z.string().optional(),
  duration: z.string().optional(),
  authFlow: z.boolean().optional(),
  mediaPlaybackId: z.string().optional(),
  mediaState: z.string().optional(),
  keywords: z.array(gameEditorialKeyword).optional(),
  image: photo.optional(),
  playbacks: z.array(playbacks).optional(),
});

/**
 *
 * @typedef  {GameHighlight} gameHighlight
 * @property {GameHighlightType1}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {boolean}
 * @property {string}
 * @property {string}
 * @property {GameEditorialKeyword[]}
 * @property {Photo}
 * @property {Playbacks[]}
 */
export type GameHighlight = z.infer<typeof gameHighlight>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gameHighlightResponse = z
  .object({
    type: gameHighlightType1.optional(),
    id: z.string().optional(),
    date: z.string().optional(),
    title: z.string().optional(),
    blurb: z.string().optional(),
    description: z.string().optional(),
    duration: z.string().optional(),
    authFlow: z.boolean().optional(),
    mediaPlaybackId: z.string().optional(),
    mediaState: z.string().optional(),
    keywords: z.array(gameEditorialKeywordResponse).optional(),
    image: photoResponse.optional(),
    playbacks: z.array(playbacksResponse).optional(),
  })
  .transform((data) => ({
    type_: data['type'],
    id: data['id'],
    date: data['date'],
    title1: data['title'],
    blurb: data['blurb'],
    description: data['description'],
    duration: data['duration'],
    authFlow: data['authFlow'],
    mediaPlaybackId: data['mediaPlaybackId'],
    mediaState: data['mediaState'],
    keywords: data['keywords'],
    image: data['image'],
    playbacks: data['playbacks'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gameHighlightRequest = z
  .object({
    type_: gameHighlightType1.nullish(),
    id: z.string().nullish(),
    date: z.string().nullish(),
    title1: z.string().nullish(),
    blurb: z.string().nullish(),
    description: z.string().nullish(),
    duration: z.string().nullish(),
    authFlow: z.boolean().nullish(),
    mediaPlaybackId: z.string().nullish(),
    mediaState: z.string().nullish(),
    keywords: z.array(gameEditorialKeywordRequest).nullish(),
    image: photoRequest.nullish(),
    playbacks: z.array(playbacksRequest).nullish(),
  })
  .transform((data) => ({
    type: data['type_'],
    id: data['id'],
    date: data['date'],
    title: data['title1'],
    blurb: data['blurb'],
    description: data['description'],
    duration: data['duration'],
    authFlow: data['authFlow'],
    mediaPlaybackId: data['mediaPlaybackId'],
    mediaState: data['mediaState'],
    keywords: data['keywords'],
    image: data['image'],
    playbacks: data['playbacks'],
  }));
