// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { goals, goalsRequest, goalsResponse } from './goals';

/**
 * The shape of the model inside the application code - what the users use
 */
export const about = z.object({
  eventIdx: z.number().optional(),
  eventId: z.number().optional(),
  period: z.number().optional(),
  periodType: z.string().optional(),
  ordinalNum: z.string().optional(),
  periodTime: z.string().optional(),
  periodTimeRemaining: z.string().optional(),
  dateTime: z.string().optional(),
  goals: goals.optional(),
});

/**
 *
 * @typedef  {About} about
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {Goals}
 */
export type About = z.infer<typeof about>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const aboutResponse = z
  .object({
    eventIdx: z.number().optional(),
    eventId: z.number().optional(),
    period: z.number().optional(),
    periodType: z.string().optional(),
    ordinalNum: z.string().optional(),
    periodTime: z.string().optional(),
    periodTimeRemaining: z.string().optional(),
    dateTime: z.string().optional(),
    goals: goalsResponse.optional(),
  })
  .transform((data) => ({
    eventIdx: data['eventIdx'],
    eventId: data['eventId'],
    period: data['period'],
    periodType: data['periodType'],
    ordinalNum: data['ordinalNum'],
    periodTime: data['periodTime'],
    periodTimeRemaining: data['periodTimeRemaining'],
    dateTime: data['dateTime'],
    goals: data['goals'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const aboutRequest = z
  .object({
    eventIdx: z.number().nullish(),
    eventId: z.number().nullish(),
    period: z.number().nullish(),
    periodType: z.string().nullish(),
    ordinalNum: z.string().nullish(),
    periodTime: z.string().nullish(),
    periodTimeRemaining: z.string().nullish(),
    dateTime: z.string().nullish(),
    goals: goalsRequest.nullish(),
  })
  .transform((data) => ({
    eventIdx: data['eventIdx'],
    eventId: data['eventId'],
    period: data['period'],
    periodType: data['periodType'],
    ordinalNum: data['ordinalNum'],
    periodTime: data['periodTime'],
    periodTimeRemaining: data['periodTimeRemaining'],
    dateTime: data['dateTime'],
    goals: data['goals'],
  }));
