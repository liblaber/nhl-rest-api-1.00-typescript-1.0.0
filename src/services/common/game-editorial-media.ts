// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { photo, photoRequest, photoResponse } from './photo';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gameEditorialMedia = z.object({
  type_: z.string().optional(),
  image: photo.optional(),
});

/**
 *
 * @typedef  {GameEditorialMedia} gameEditorialMedia
 * @property {string}
 * @property {Photo}
 */
export type GameEditorialMedia = z.infer<typeof gameEditorialMedia>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gameEditorialMediaResponse = z
  .object({
    type: z.string().optional(),
    image: photoResponse.optional(),
  })
  .transform((data) => ({
    type_: data['type'],
    image: data['image'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gameEditorialMediaRequest = z
  .object({ type_: z.string().nullish(), image: photoRequest.nullish() })
  .transform((data) => ({
    type: data['type_'],
    image: data['image'],
  }));
