// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { tokenDataType } from './token-data-type';

/**
 * The shape of the model inside the application code - what the users use
 */
export const tokenData = z.object({
  tokenGuid: z.string().optional(),
  type_: tokenDataType.optional(),
  id: z.string().optional(),
  teamId: z.string().optional(),
  name: z.string().optional(),
  seoName: z.string().optional(),
  href: z.string().optional(),
  hrefMobile: z.string().optional(),
});

/**
 *
 * @typedef  {TokenData} tokenData
 * @property {string}
 * @property {TokenDataType}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type TokenData = z.infer<typeof tokenData>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const tokenDataResponse = z
  .object({
    tokenGUID: z.string().optional(),
    type: tokenDataType.optional(),
    id: z.string().optional(),
    teamId: z.string().optional(),
    name: z.string().optional(),
    seoName: z.string().optional(),
    href: z.string().optional(),
    hrefMobile: z.string().optional(),
  })
  .transform((data) => ({
    tokenGuid: data['tokenGUID'],
    type_: data['type'],
    id: data['id'],
    teamId: data['teamId'],
    name: data['name'],
    seoName: data['seoName'],
    href: data['href'],
    hrefMobile: data['hrefMobile'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const tokenDataRequest = z
  .object({
    tokenGuid: z.string().nullish(),
    type_: tokenDataType.nullish(),
    id: z.string().nullish(),
    teamId: z.string().nullish(),
    name: z.string().nullish(),
    seoName: z.string().nullish(),
    href: z.string().nullish(),
    hrefMobile: z.string().nullish(),
  })
  .transform((data) => ({
    tokenGUID: data['tokenGuid'],
    type: data['type_'],
    id: data['id'],
    teamId: data['teamId'],
    name: data['name'],
    seoName: data['seoName'],
    href: data['href'],
    hrefMobile: data['hrefMobile'],
  }));
