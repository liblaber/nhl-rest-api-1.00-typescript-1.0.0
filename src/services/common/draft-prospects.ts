// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { draftProspect, draftProspectRequest, draftProspectResponse } from './draft-prospect';

/**
 * The shape of the model inside the application code - what the users use
 */
export const draftProspects = z.object({
  copyright: z.string().optional(),
  prospects: z.array(draftProspect).optional(),
});

/**
 *
 * @typedef  {DraftProspects} draftProspects
 * @property {string}
 * @property {DraftProspect[]}
 */
export type DraftProspects = z.infer<typeof draftProspects>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const draftProspectsResponse = z
  .object({
    copyright: z.string().optional(),
    prospects: z.array(draftProspectResponse).optional(),
  })
  .transform((data) => ({
    copyright: data['copyright'],
    prospects: data['prospects'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const draftProspectsRequest = z
  .object({ copyright: z.string().nullish(), prospects: z.array(draftProspectRequest).nullish() })
  .transform((data) => ({
    copyright: data['copyright'],
    prospects: data['prospects'],
  }));
