// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { coachesPerson, coachesPersonRequest, coachesPersonResponse } from './coaches-person';
import { coachesPosition, coachesPositionRequest, coachesPositionResponse } from './coaches-position';

/**
 * The shape of the model inside the application code - what the users use
 */
export const coaches = z.object({
  person: coachesPerson.optional(),
  position: coachesPosition.optional(),
});

/**
 *
 * @typedef  {Coaches} coaches
 * @property {CoachesPerson}
 * @property {CoachesPosition}
 */
export type Coaches = z.infer<typeof coaches>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const coachesResponse = z
  .object({
    person: coachesPersonResponse.optional(),
    position: coachesPositionResponse.optional(),
  })
  .transform((data) => ({
    person: data['person'],
    position: data['position'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const coachesRequest = z
  .object({ person: coachesPersonRequest.nullish(), position: coachesPositionRequest.nullish() })
  .transform((data) => ({
    person: data['person'],
    position: data['position'],
  }));
