// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const intermissionInfo = z.object({
  intermissionTimeRemaining: z.number().optional(),
  intermissionTimeElapsed: z.number().optional(),
  inIntermission: z.boolean().optional(),
});

/**
 *
 * @typedef  {IntermissionInfo} intermissionInfo
 * @property {number}
 * @property {number}
 * @property {boolean}
 */
export type IntermissionInfo = z.infer<typeof intermissionInfo>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const intermissionInfoResponse = z
  .object({
    intermissionTimeRemaining: z.number().optional(),
    intermissionTimeElapsed: z.number().optional(),
    inIntermission: z.boolean().optional(),
  })
  .transform((data) => ({
    intermissionTimeRemaining: data['intermissionTimeRemaining'],
    intermissionTimeElapsed: data['intermissionTimeElapsed'],
    inIntermission: data['inIntermission'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const intermissionInfoRequest = z
  .object({
    intermissionTimeRemaining: z.number().nullish(),
    intermissionTimeElapsed: z.number().nullish(),
    inIntermission: z.boolean().nullish(),
  })
  .transform((data) => ({
    intermissionTimeRemaining: data['intermissionTimeRemaining'],
    intermissionTimeElapsed: data['intermissionTimeElapsed'],
    inIntermission: data['inIntermission'],
  }));
