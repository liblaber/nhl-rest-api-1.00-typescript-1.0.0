// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { playersPerson, playersPersonRequest, playersPersonResponse } from './players-person';
import { playersPosition, playersPositionRequest, playersPositionResponse } from './players-position';
import { playersStats, playersStatsRequest, playersStatsResponse } from './players-stats';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gameBoxscoreTeamPlayers = z.object({
  person: playersPerson.optional(),
  jerseyNumber: z.string().optional(),
  position: playersPosition.optional(),
  stats: playersStats.optional(),
});

/**
 *
 * @typedef  {GameBoxscoreTeamPlayers} gameBoxscoreTeamPlayers
 * @property {PlayersPerson}
 * @property {string}
 * @property {PlayersPosition}
 * @property {PlayersStats}
 */
export type GameBoxscoreTeamPlayers = z.infer<typeof gameBoxscoreTeamPlayers>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gameBoxscoreTeamPlayersResponse = z
  .object({
    person: playersPersonResponse.optional(),
    jerseyNumber: z.string().optional(),
    position: playersPositionResponse.optional(),
    stats: playersStatsResponse.optional(),
  })
  .transform((data) => ({
    person: data['person'],
    jerseyNumber: data['jerseyNumber'],
    position: data['position'],
    stats: data['stats'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gameBoxscoreTeamPlayersRequest = z
  .object({
    person: playersPersonRequest.nullish(),
    jerseyNumber: z.string().nullish(),
    position: playersPositionRequest.nullish(),
    stats: playersStatsRequest.nullish(),
  })
  .transform((data) => ({
    person: data['person'],
    jerseyNumber: data['jerseyNumber'],
    position: data['position'],
    stats: data['stats'],
  }));
