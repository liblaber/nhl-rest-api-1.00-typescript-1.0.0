// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const cuts = z.object({
  aspectRatio: z.string().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
  src: z.string().optional(),
  at2x: z.string().optional(),
  at3x: z.string().optional(),
});

/**
 *
 * @typedef  {Cuts} cuts
 * @property {string}
 * @property {number}
 * @property {number}
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type Cuts = z.infer<typeof cuts>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const cutsResponse = z
  .object({
    aspectRatio: z.string().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    src: z.string().optional(),
    at2x: z.string().optional(),
    at3x: z.string().optional(),
  })
  .transform((data) => ({
    aspectRatio: data['aspectRatio'],
    width: data['width'],
    height: data['height'],
    src: data['src'],
    at2x: data['at2x'],
    at3x: data['at3x'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const cutsRequest = z
  .object({
    aspectRatio: z.string().nullish(),
    width: z.number().nullish(),
    height: z.number().nullish(),
    src: z.string().nullish(),
    at2x: z.string().nullish(),
    at3x: z.string().nullish(),
  })
  .transform((data) => ({
    aspectRatio: data['aspectRatio'],
    width: data['width'],
    height: data['height'],
    src: data['src'],
    at2x: data['at2x'],
    at3x: data['at3x'],
  }));
