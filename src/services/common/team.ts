// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { venue, venueRequest, venueResponse } from './venue';
import { teamDivision, teamDivisionRequest, teamDivisionResponse } from './team-division';
import { teamConference, teamConferenceRequest, teamConferenceResponse } from './team-conference';
import { franchise, franchiseRequest, franchiseResponse } from './franchise';
import { teamRoster, teamRosterRequest, teamRosterResponse } from './team-roster';
import { nextGameSchedule, nextGameScheduleRequest, nextGameScheduleResponse } from './next-game-schedule';

/**
 * The shape of the model inside the application code - what the users use
 */
export const team = z.object({
  id: z.number().optional(),
  name: z.string().optional(),
  link: z.string().optional(),
  venue: venue.optional(),
  abbreviation: z.string().optional(),
  triCode: z.string().optional(),
  teamName: z.string().optional(),
  locationName: z.string().optional(),
  firstYearOfPlay: z.number().optional(),
  division: teamDivision.optional(),
  conference: teamConference.optional(),
  franchise: franchise.optional(),
  roster: teamRoster.optional(),
  nextGameSchedule: nextGameSchedule.optional(),
  shortName: z.string().optional(),
  officialSiteUrl: z.string().optional(),
  franchiseId: z.number().optional(),
  active: z.boolean().optional(),
});

/**
 *
 * @typedef  {Team} team
 * @property {number}
 * @property {string}
 * @property {string}
 * @property {Venue}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {TeamDivision}
 * @property {TeamConference}
 * @property {Franchise}
 * @property {TeamRoster}
 * @property {NextGameSchedule}
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {boolean}
 */
export type Team = z.infer<typeof team>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const teamResponse = z
  .object({
    id: z.number().optional(),
    name: z.string().optional(),
    link: z.string().optional(),
    venue: venueResponse.optional(),
    abbreviation: z.string().optional(),
    triCode: z.string().optional(),
    teamName: z.string().optional(),
    locationName: z.string().optional(),
    firstYearOfPlay: z.number().optional(),
    division: teamDivisionResponse.optional(),
    conference: teamConferenceResponse.optional(),
    franchise: franchiseResponse.optional(),
    roster: teamRosterResponse.optional(),
    nextGameSchedule: nextGameScheduleResponse.optional(),
    shortName: z.string().optional(),
    officialSiteUrl: z.string().optional(),
    franchiseId: z.number().optional(),
    active: z.boolean().optional(),
  })
  .transform((data) => ({
    id: data['id'],
    name: data['name'],
    link: data['link'],
    venue: data['venue'],
    abbreviation: data['abbreviation'],
    triCode: data['triCode'],
    teamName: data['teamName'],
    locationName: data['locationName'],
    firstYearOfPlay: data['firstYearOfPlay'],
    division: data['division'],
    conference: data['conference'],
    franchise: data['franchise'],
    roster: data['roster'],
    nextGameSchedule: data['nextGameSchedule'],
    shortName: data['shortName'],
    officialSiteUrl: data['officialSiteUrl'],
    franchiseId: data['franchiseId'],
    active: data['active'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const teamRequest = z
  .object({
    id: z.number().nullish(),
    name: z.string().nullish(),
    link: z.string().nullish(),
    venue: venueRequest.nullish(),
    abbreviation: z.string().nullish(),
    triCode: z.string().nullish(),
    teamName: z.string().nullish(),
    locationName: z.string().nullish(),
    firstYearOfPlay: z.number().nullish(),
    division: teamDivisionRequest.nullish(),
    conference: teamConferenceRequest.nullish(),
    franchise: franchiseRequest.nullish(),
    roster: teamRosterRequest.nullish(),
    nextGameSchedule: nextGameScheduleRequest.nullish(),
    shortName: z.string().nullish(),
    officialSiteUrl: z.string().nullish(),
    franchiseId: z.number().nullish(),
    active: z.boolean().nullish(),
  })
  .transform((data) => ({
    id: data['id'],
    name: data['name'],
    link: data['link'],
    venue: data['venue'],
    abbreviation: data['abbreviation'],
    triCode: data['triCode'],
    teamName: data['teamName'],
    locationName: data['locationName'],
    firstYearOfPlay: data['firstYearOfPlay'],
    division: data['division'],
    conference: data['conference'],
    franchise: data['franchise'],
    roster: data['roster'],
    nextGameSchedule: data['nextGameSchedule'],
    shortName: data['shortName'],
    officialSiteUrl: data['officialSiteUrl'],
    franchiseId: data['franchiseId'],
    active: data['active'],
  }));
