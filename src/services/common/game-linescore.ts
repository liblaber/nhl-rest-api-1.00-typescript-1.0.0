// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { gamePeriod, gamePeriodRequest, gamePeriodResponse } from './game-period';
import { shootoutInfo, shootoutInfoRequest, shootoutInfoResponse } from './shootout-info';
import { gameLinescoreTeams, gameLinescoreTeamsRequest, gameLinescoreTeamsResponse } from './game-linescore-teams';
import { intermissionInfo, intermissionInfoRequest, intermissionInfoResponse } from './intermission-info';
import { powerPlayInfo, powerPlayInfoRequest, powerPlayInfoResponse } from './power-play-info';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gameLinescore = z.object({
  currentPeriod: z.number().optional(),
  currentPeriodOrdinal: z.string().optional(),
  currentPeriodTimeRemaining: z.string().optional(),
  periods: z.array(gamePeriod).optional(),
  shootoutInfo: shootoutInfo.optional(),
  teams: gameLinescoreTeams.optional(),
  powerPlayStrength: z.string().optional(),
  hasShootout: z.boolean().optional(),
  intermissionInfo: intermissionInfo.optional(),
  powerPlayInfo: powerPlayInfo.optional(),
});

/**
 *
 * @typedef  {GameLinescore} gameLinescore
 * @property {number}
 * @property {string}
 * @property {string}
 * @property {GamePeriod[]}
 * @property {ShootoutInfo}
 * @property {GameLinescoreTeams}
 * @property {string}
 * @property {boolean}
 * @property {IntermissionInfo}
 * @property {PowerPlayInfo}
 */
export type GameLinescore = z.infer<typeof gameLinescore>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gameLinescoreResponse = z
  .object({
    currentPeriod: z.number().optional(),
    currentPeriodOrdinal: z.string().optional(),
    currentPeriodTimeRemaining: z.string().optional(),
    periods: z.array(gamePeriodResponse).optional(),
    shootoutInfo: shootoutInfoResponse.optional(),
    teams: gameLinescoreTeamsResponse.optional(),
    powerPlayStrength: z.string().optional(),
    hasShootout: z.boolean().optional(),
    intermissionInfo: intermissionInfoResponse.optional(),
    powerPlayInfo: powerPlayInfoResponse.optional(),
  })
  .transform((data) => ({
    currentPeriod: data['currentPeriod'],
    currentPeriodOrdinal: data['currentPeriodOrdinal'],
    currentPeriodTimeRemaining: data['currentPeriodTimeRemaining'],
    periods: data['periods'],
    shootoutInfo: data['shootoutInfo'],
    teams: data['teams'],
    powerPlayStrength: data['powerPlayStrength'],
    hasShootout: data['hasShootout'],
    intermissionInfo: data['intermissionInfo'],
    powerPlayInfo: data['powerPlayInfo'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gameLinescoreRequest = z
  .object({
    currentPeriod: z.number().nullish(),
    currentPeriodOrdinal: z.string().nullish(),
    currentPeriodTimeRemaining: z.string().nullish(),
    periods: z.array(gamePeriodRequest).nullish(),
    shootoutInfo: shootoutInfoRequest.nullish(),
    teams: gameLinescoreTeamsRequest.nullish(),
    powerPlayStrength: z.string().nullish(),
    hasShootout: z.boolean().nullish(),
    intermissionInfo: intermissionInfoRequest.nullish(),
    powerPlayInfo: powerPlayInfoRequest.nullish(),
  })
  .transform((data) => ({
    currentPeriod: data['currentPeriod'],
    currentPeriodOrdinal: data['currentPeriodOrdinal'],
    currentPeriodTimeRemaining: data['currentPeriodTimeRemaining'],
    periods: data['periods'],
    shootoutInfo: data['shootoutInfo'],
    teams: data['teams'],
    powerPlayStrength: data['powerPlayStrength'],
    hasShootout: data['hasShootout'],
    intermissionInfo: data['intermissionInfo'],
    powerPlayInfo: data['powerPlayInfo'],
  }));
