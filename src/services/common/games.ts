// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { gamesStatus, gamesStatusRequest, gamesStatusResponse } from './games-status';
import { gamesTeams, gamesTeamsRequest, gamesTeamsResponse } from './games-teams';
import { gamesVenue, gamesVenueRequest, gamesVenueResponse } from './games-venue';
import { gamesContent, gamesContentRequest, gamesContentResponse } from './games-content';

/**
 * The shape of the model inside the application code - what the users use
 */
export const games = z.object({
  gamePk: z.number().optional(),
  link: z.string().optional(),
  gameType: z.string().optional(),
  season: z.string().optional(),
  gameDate: z.string().optional(),
  status: gamesStatus.optional(),
  teams: gamesTeams.optional(),
  venue1: gamesVenue.optional(),
  content: gamesContent.optional(),
});

/**
 *
 * @typedef  {Games} games
 * @property {number}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {GamesStatus}
 * @property {GamesTeams}
 * @property {GamesVenue}
 * @property {GamesContent}
 */
export type Games = z.infer<typeof games>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gamesResponse = z
  .object({
    gamePk: z.number().optional(),
    link: z.string().optional(),
    gameType: z.string().optional(),
    season: z.string().optional(),
    gameDate: z.string().optional(),
    status: gamesStatusResponse.optional(),
    teams: gamesTeamsResponse.optional(),
    venue: gamesVenueResponse.optional(),
    content: gamesContentResponse.optional(),
  })
  .transform((data) => ({
    gamePk: data['gamePk'],
    link: data['link'],
    gameType: data['gameType'],
    season: data['season'],
    gameDate: data['gameDate'],
    status: data['status'],
    teams: data['teams'],
    venue1: data['venue'],
    content: data['content'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gamesRequest = z
  .object({
    gamePk: z.number().nullish(),
    link: z.string().nullish(),
    gameType: z.string().nullish(),
    season: z.string().nullish(),
    gameDate: z.string().nullish(),
    status: gamesStatusRequest.nullish(),
    teams: gamesTeamsRequest.nullish(),
    venue1: gamesVenueRequest.nullish(),
    content: gamesContentRequest.nullish(),
  })
  .transform((data) => ({
    gamePk: data['gamePk'],
    link: data['link'],
    gameType: data['gameType'],
    season: data['season'],
    gameDate: data['gameDate'],
    status: data['status'],
    teams: data['teams'],
    venue: data['venue1'],
    content: data['content'],
  }));
