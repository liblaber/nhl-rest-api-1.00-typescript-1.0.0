// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const playsByPeriod = z.object({
  startIndex: z.number().optional(),
  plays1: z.array(z.number()).optional(),
  endIndex: z.number().optional(),
});

/**
 *
 * @typedef  {PlaysByPeriod} playsByPeriod
 * @property {number}
 * @property {number[]}
 * @property {number}
 */
export type PlaysByPeriod = z.infer<typeof playsByPeriod>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const playsByPeriodResponse = z
  .object({
    startIndex: z.number().optional(),
    plays: z.array(z.number()).optional(),
    endIndex: z.number().optional(),
  })
  .transform((data) => ({
    startIndex: data['startIndex'],
    plays1: data['plays'],
    endIndex: data['endIndex'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const playsByPeriodRequest = z
  .object({ startIndex: z.number().nullish(), plays1: z.array(z.number()).nullish(), endIndex: z.number().nullish() })
  .transform((data) => ({
    startIndex: data['startIndex'],
    plays: data['plays1'],
    endIndex: data['endIndex'],
  }));
