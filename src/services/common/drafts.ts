// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { rounds, roundsRequest, roundsResponse } from './rounds';

/**
 * The shape of the model inside the application code - what the users use
 */
export const drafts = z.object({
  draftYear: z.number().optional(),
  rounds: z.array(rounds).optional(),
});

/**
 *
 * @typedef  {Drafts} drafts
 * @property {number}
 * @property {Rounds[]}
 */
export type Drafts = z.infer<typeof drafts>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const draftsResponse = z
  .object({
    draftYear: z.number().optional(),
    rounds: z.array(roundsResponse).optional(),
  })
  .transform((data) => ({
    draftYear: data['draftYear'],
    rounds: data['rounds'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const draftsRequest = z
  .object({ draftYear: z.number().nullish(), rounds: z.array(roundsRequest).nullish() })
  .transform((data) => ({
    draftYear: data['draftYear'],
    rounds: data['rounds'],
  }));
