// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { playbacksName } from './playbacks-name';

/**
 * The shape of the model inside the application code - what the users use
 */
export const playbacks = z.object({
  name: playbacksName.optional(),
  width: z.string().optional(),
  height: z.string().optional(),
  url: z.string().optional(),
});

/**
 *
 * @typedef  {Playbacks} playbacks
 * @property {PlaybacksName}
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type Playbacks = z.infer<typeof playbacks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const playbacksResponse = z
  .object({
    name: playbacksName.optional(),
    width: z.string().optional(),
    height: z.string().optional(),
    url: z.string().optional(),
  })
  .transform((data) => ({
    name: data['name'],
    width: data['width'],
    height: data['height'],
    url: data['url'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const playbacksRequest = z
  .object({
    name: playbacksName.nullish(),
    width: z.string().nullish(),
    height: z.string().nullish(),
    url: z.string().nullish(),
  })
  .transform((data) => ({
    name: data['name'],
    width: data['width'],
    height: data['height'],
    url: data['url'],
  }));
