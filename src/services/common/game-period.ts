// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { gamePeriodHome, gamePeriodHomeRequest, gamePeriodHomeResponse } from './game-period-home';
import { gamePeriodAway, gamePeriodAwayRequest, gamePeriodAwayResponse } from './game-period-away';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gamePeriod = z.object({
  periodType: z.string().optional(),
  startTime: z.string().optional(),
  endTime: z.string().optional(),
  num: z.number().optional(),
  ordinalNum: z.string().optional(),
  home: gamePeriodHome.optional(),
  away: gamePeriodAway.optional(),
});

/**
 *
 * @typedef  {GamePeriod} gamePeriod
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {string}
 * @property {GamePeriodHome}
 * @property {GamePeriodAway}
 */
export type GamePeriod = z.infer<typeof gamePeriod>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gamePeriodResponse = z
  .object({
    periodType: z.string().optional(),
    startTime: z.string().optional(),
    endTime: z.string().optional(),
    num: z.number().optional(),
    ordinalNum: z.string().optional(),
    home: gamePeriodHomeResponse.optional(),
    away: gamePeriodAwayResponse.optional(),
  })
  .transform((data) => ({
    periodType: data['periodType'],
    startTime: data['startTime'],
    endTime: data['endTime'],
    num: data['num'],
    ordinalNum: data['ordinalNum'],
    home: data['home'],
    away: data['away'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gamePeriodRequest = z
  .object({
    periodType: z.string().nullish(),
    startTime: z.string().nullish(),
    endTime: z.string().nullish(),
    num: z.number().nullish(),
    ordinalNum: z.string().nullish(),
    home: gamePeriodHomeRequest.nullish(),
    away: gamePeriodAwayRequest.nullish(),
  })
  .transform((data) => ({
    periodType: data['periodType'],
    startTime: data['startTime'],
    endTime: data['endTime'],
    num: data['num'],
    ordinalNum: data['ordinalNum'],
    home: data['home'],
    away: data['away'],
  }));
