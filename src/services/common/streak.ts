// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const streak = z.object({
  streakType: z.string().optional(),
  streakNumber: z.number().optional(),
  streakCode: z.string().optional(),
});

/**
 *
 * @typedef  {Streak} streak
 * @property {string}
 * @property {number}
 * @property {string}
 */
export type Streak = z.infer<typeof streak>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const streakResponse = z
  .object({
    streakType: z.string().optional(),
    streakNumber: z.number().optional(),
    streakCode: z.string().optional(),
  })
  .transform((data) => ({
    streakType: data['streakType'],
    streakNumber: data['streakNumber'],
    streakCode: data['streakCode'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const streakRequest = z
  .object({ streakType: z.string().nullish(), streakNumber: z.number().nullish(), streakCode: z.string().nullish() })
  .transform((data) => ({
    streakType: data['streakType'],
    streakNumber: data['streakNumber'],
    streakCode: data['streakCode'],
  }));
