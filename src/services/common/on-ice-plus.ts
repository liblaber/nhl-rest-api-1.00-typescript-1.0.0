// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const onIcePlus = z.object({
  playerId: z.number().optional(),
  shiftDuration: z.number().optional(),
  stamina: z.number().optional(),
});

/**
 *
 * @typedef  {OnIcePlus} onIcePlus
 * @property {number}
 * @property {number}
 * @property {number}
 */
export type OnIcePlus = z.infer<typeof onIcePlus>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const onIcePlusResponse = z
  .object({
    playerId: z.number().optional(),
    shiftDuration: z.number().optional(),
    stamina: z.number().optional(),
  })
  .transform((data) => ({
    playerId: data['playerId'],
    shiftDuration: data['shiftDuration'],
    stamina: data['stamina'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const onIcePlusRequest = z
  .object({ playerId: z.number().nullish(), shiftDuration: z.number().nullish(), stamina: z.number().nullish() })
  .transform((data) => ({
    playerId: data['playerId'],
    shiftDuration: data['shiftDuration'],
    stamina: data['stamina'],
  }));
