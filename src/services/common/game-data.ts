// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { gameDataGame, gameDataGameRequest, gameDataGameResponse } from './game-data-game';
import { datetime, datetimeRequest, datetimeResponse } from './datetime';
import { gameDataStatus, gameDataStatusRequest, gameDataStatusResponse } from './game-data-status';
import { gameDataTeams, gameDataTeamsRequest, gameDataTeamsResponse } from './game-data-teams';
import { player, playerRequest, playerResponse } from './player';
import { gameDataVenue, gameDataVenueRequest, gameDataVenueResponse } from './game-data-venue';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gameData = z.object({
  game1: gameDataGame.optional(),
  datetime: datetime.optional(),
  status: gameDataStatus.optional(),
  teams: gameDataTeams.optional(),
  players: player.optional(),
  venue1: gameDataVenue.optional(),
});

/**
 *
 * @typedef  {GameData} gameData
 * @property {GameDataGame}
 * @property {Datetime}
 * @property {GameDataStatus}
 * @property {GameDataTeams}
 * @property {Player}
 * @property {GameDataVenue}
 */
export type GameData = z.infer<typeof gameData>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gameDataResponse = z
  .object({
    game: gameDataGameResponse.optional(),
    datetime: datetimeResponse.optional(),
    status: gameDataStatusResponse.optional(),
    teams: gameDataTeamsResponse.optional(),
    players: playerResponse.optional(),
    venue: gameDataVenueResponse.optional(),
  })
  .transform((data) => ({
    game1: data['game'],
    datetime: data['datetime'],
    status: data['status'],
    teams: data['teams'],
    players: data['players'],
    venue1: data['venue'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gameDataRequest = z
  .object({
    game1: gameDataGameRequest.nullish(),
    datetime: datetimeRequest.nullish(),
    status: gameDataStatusRequest.nullish(),
    teams: gameDataTeamsRequest.nullish(),
    players: playerRequest.nullish(),
    venue1: gameDataVenueRequest.nullish(),
  })
  .transform((data) => ({
    game: data['game1'],
    datetime: data['datetime'],
    status: data['status'],
    teams: data['teams'],
    players: data['players'],
    venue: data['venue1'],
  }));
