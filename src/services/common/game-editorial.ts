// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { tokenData, tokenDataRequest, tokenDataResponse } from './token-data';
import { contributor, contributorRequest, contributorResponse } from './contributor';
import {
  gameEditorialKeyword,
  gameEditorialKeywordRequest,
  gameEditorialKeywordResponse,
} from './game-editorial-keyword';
import { gameEditorialMedia, gameEditorialMediaRequest, gameEditorialMediaResponse } from './game-editorial-media';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gameEditorial = z.object({
  type_: z.string().optional(),
  state: z.string().optional(),
  date: z.string().optional(),
  id: z.string().optional(),
  headline: z.string().optional(),
  subhead: z.string().optional(),
  seoTitle: z.string().optional(),
  seoDescription: z.string().optional(),
  seoKeywords: z.string().optional(),
  slug: z.string().optional(),
  commenting: z.boolean().optional(),
  tagline: z.string().optional(),
  tokenData: tokenData.optional(),
  contributor: contributor.optional(),
  keywordsDisplay: z.array(gameEditorialKeyword).optional(),
  keywordsAll: z.array(gameEditorialKeyword).optional(),
  approval: z.string().optional(),
  url: z.string().optional(),
  dataUri: z.string().optional(),
  primaryKeyword: gameEditorialKeyword.optional(),
  media: gameEditorialMedia.optional(),
  preview: z.string().optional(),
});

/**
 *
 * @typedef  {GameEditorial} gameEditorial
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {boolean}
 * @property {string}
 * @property {TokenData}
 * @property {Contributor}
 * @property {GameEditorialKeyword[]}
 * @property {GameEditorialKeyword[]}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {GameEditorialKeyword}
 * @property {GameEditorialMedia}
 * @property {string}
 */
export type GameEditorial = z.infer<typeof gameEditorial>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gameEditorialResponse = z
  .object({
    type: z.string().optional(),
    state: z.string().optional(),
    date: z.string().optional(),
    id: z.string().optional(),
    headline: z.string().optional(),
    subhead: z.string().optional(),
    seoTitle: z.string().optional(),
    seoDescription: z.string().optional(),
    seoKeywords: z.string().optional(),
    slug: z.string().optional(),
    commenting: z.boolean().optional(),
    tagline: z.string().optional(),
    tokenData: tokenDataResponse.optional(),
    contributor: contributorResponse.optional(),
    keywordsDisplay: z.array(gameEditorialKeywordResponse).optional(),
    keywordsAll: z.array(gameEditorialKeywordResponse).optional(),
    approval: z.string().optional(),
    url: z.string().optional(),
    dataURI: z.string().optional(),
    primaryKeyword: gameEditorialKeywordResponse.optional(),
    media: gameEditorialMediaResponse.optional(),
    preview: z.string().optional(),
  })
  .transform((data) => ({
    type_: data['type'],
    state: data['state'],
    date: data['date'],
    id: data['id'],
    headline: data['headline'],
    subhead: data['subhead'],
    seoTitle: data['seoTitle'],
    seoDescription: data['seoDescription'],
    seoKeywords: data['seoKeywords'],
    slug: data['slug'],
    commenting: data['commenting'],
    tagline: data['tagline'],
    tokenData: data['tokenData'],
    contributor: data['contributor'],
    keywordsDisplay: data['keywordsDisplay'],
    keywordsAll: data['keywordsAll'],
    approval: data['approval'],
    url: data['url'],
    dataUri: data['dataURI'],
    primaryKeyword: data['primaryKeyword'],
    media: data['media'],
    preview: data['preview'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gameEditorialRequest = z
  .object({
    type_: z.string().nullish(),
    state: z.string().nullish(),
    date: z.string().nullish(),
    id: z.string().nullish(),
    headline: z.string().nullish(),
    subhead: z.string().nullish(),
    seoTitle: z.string().nullish(),
    seoDescription: z.string().nullish(),
    seoKeywords: z.string().nullish(),
    slug: z.string().nullish(),
    commenting: z.boolean().nullish(),
    tagline: z.string().nullish(),
    tokenData: tokenDataRequest.nullish(),
    contributor: contributorRequest.nullish(),
    keywordsDisplay: z.array(gameEditorialKeywordRequest).nullish(),
    keywordsAll: z.array(gameEditorialKeywordRequest).nullish(),
    approval: z.string().nullish(),
    url: z.string().nullish(),
    dataUri: z.string().nullish(),
    primaryKeyword: gameEditorialKeywordRequest.nullish(),
    media: gameEditorialMediaRequest.nullish(),
    preview: z.string().nullish(),
  })
  .transform((data) => ({
    type: data['type_'],
    state: data['state'],
    date: data['date'],
    id: data['id'],
    headline: data['headline'],
    subhead: data['subhead'],
    seoTitle: data['seoTitle'],
    seoDescription: data['seoDescription'],
    seoKeywords: data['seoKeywords'],
    slug: data['slug'],
    commenting: data['commenting'],
    tagline: data['tagline'],
    tokenData: data['tokenData'],
    contributor: data['contributor'],
    keywordsDisplay: data['keywordsDisplay'],
    keywordsAll: data['keywordsAll'],
    approval: data['approval'],
    url: data['url'],
    dataURI: data['dataUri'],
    primaryKeyword: data['primaryKeyword'],
    media: data['media'],
    preview: data['preview'],
  }));
