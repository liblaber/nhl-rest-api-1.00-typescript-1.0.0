// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { games, gamesRequest, gamesResponse } from './games';

/**
 * The shape of the model inside the application code - what the users use
 */
export const dates = z.object({
  date: z.string().optional(),
  totalItems: z.number().optional(),
  totalEvents: z.number().optional(),
  totalGames: z.number().optional(),
  totalMatches: z.number().optional(),
  games: z.array(games).optional(),
  events: z.array(z.any()).optional(),
  matches: z.array(z.any()).optional(),
});

/**
 *
 * @typedef  {Dates} dates
 * @property {string}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {Games[]}
 * @property {any[]}
 * @property {any[]}
 */
export type Dates = z.infer<typeof dates>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const datesResponse = z
  .object({
    date: z.string().optional(),
    totalItems: z.number().optional(),
    totalEvents: z.number().optional(),
    totalGames: z.number().optional(),
    totalMatches: z.number().optional(),
    games: z.array(gamesResponse).optional(),
    events: z.array(z.any()).optional(),
    matches: z.array(z.any()).optional(),
  })
  .transform((data) => ({
    date: data['date'],
    totalItems: data['totalItems'],
    totalEvents: data['totalEvents'],
    totalGames: data['totalGames'],
    totalMatches: data['totalMatches'],
    games: data['games'],
    events: data['events'],
    matches: data['matches'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const datesRequest = z
  .object({
    date: z.string().nullish(),
    totalItems: z.number().nullish(),
    totalEvents: z.number().nullish(),
    totalGames: z.number().nullish(),
    totalMatches: z.number().nullish(),
    games: z.array(gamesRequest).nullish(),
    events: z.array(z.any()).nullish(),
    matches: z.array(z.any()).nullish(),
  })
  .transform((data) => ({
    date: data['date'],
    totalItems: data['totalItems'],
    totalEvents: data['totalEvents'],
    totalGames: data['totalGames'],
    totalMatches: data['totalMatches'],
    games: data['games'],
    events: data['events'],
    matches: data['matches'],
  }));
