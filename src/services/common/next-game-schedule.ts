// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { dates, datesRequest, datesResponse } from './dates';

/**
 * The shape of the model inside the application code - what the users use
 */
export const nextGameSchedule = z.object({
  totalItems: z.number().optional(),
  totalEvents: z.number().optional(),
  totalGames: z.number().optional(),
  totalMatches: z.number().optional(),
  dates: z.array(dates).optional(),
});

/**
 *
 * @typedef  {NextGameSchedule} nextGameSchedule
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {Dates[]}
 */
export type NextGameSchedule = z.infer<typeof nextGameSchedule>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const nextGameScheduleResponse = z
  .object({
    totalItems: z.number().optional(),
    totalEvents: z.number().optional(),
    totalGames: z.number().optional(),
    totalMatches: z.number().optional(),
    dates: z.array(datesResponse).optional(),
  })
  .transform((data) => ({
    totalItems: data['totalItems'],
    totalEvents: data['totalEvents'],
    totalGames: data['totalGames'],
    totalMatches: data['totalMatches'],
    dates: data['dates'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const nextGameScheduleRequest = z
  .object({
    totalItems: z.number().nullish(),
    totalEvents: z.number().nullish(),
    totalGames: z.number().nullish(),
    totalMatches: z.number().nullish(),
    dates: z.array(datesRequest).nullish(),
  })
  .transform((data) => ({
    totalItems: data['totalItems'],
    totalEvents: data['totalEvents'],
    totalGames: data['totalGames'],
    totalMatches: data['totalMatches'],
    dates: data['dates'],
  }));
