// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { official, officialRequest, officialResponse } from './official';
import { officialType } from './official-type';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gameOfficial = z.object({
  official: official.optional(),
  officialType: officialType.optional(),
});

/**
 *
 * @typedef  {GameOfficial} gameOfficial
 * @property {Official}
 * @property {OfficialType}
 */
export type GameOfficial = z.infer<typeof gameOfficial>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gameOfficialResponse = z
  .object({
    official: officialResponse.optional(),
    officialType: officialType.optional(),
  })
  .transform((data) => ({
    official: data['official'],
    officialType: data['officialType'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gameOfficialRequest = z
  .object({ official: officialRequest.nullish(), officialType: officialType.nullish() })
  .transform((data) => ({
    official: data['official'],
    officialType: data['officialType'],
  }));
