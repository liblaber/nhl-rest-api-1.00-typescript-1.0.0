// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { shootsCatches } from './shoots-catches';
import { currentTeam, currentTeamRequest, currentTeamResponse } from './current-team';
import {
  playerPrimaryPosition,
  playerPrimaryPositionRequest,
  playerPrimaryPositionResponse,
} from './player-primary-position';

/**
 * The shape of the model inside the application code - what the users use
 */
export const player = z.object({
  id: z.number().optional(),
  fullName: z.string().optional(),
  link: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  primaryNumber: z.string().optional(),
  birthDate: z.string().optional(),
  currentAge: z.number().optional(),
  birthCity: z.string().optional(),
  birthStateProvince: z.string().optional(),
  birthCountry: z.string().optional(),
  nationality: z.string().optional(),
  height: z.string().optional(),
  weight: z.number().optional(),
  active: z.boolean().optional(),
  alternateCaptain: z.boolean().optional(),
  captain: z.boolean().optional(),
  rookie: z.boolean().optional(),
  shootsCatches: shootsCatches.optional(),
  rosterStatus: z.string().optional(),
  currentTeam: currentTeam.optional(),
  primaryPosition: playerPrimaryPosition.optional(),
});

/**
 *
 * @typedef  {Player} player
 * @property {number}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {boolean}
 * @property {boolean}
 * @property {boolean}
 * @property {boolean}
 * @property {ShootsCatches}
 * @property {string}
 * @property {CurrentTeam}
 * @property {PlayerPrimaryPosition}
 */
export type Player = z.infer<typeof player>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const playerResponse = z
  .object({
    id: z.number().optional(),
    fullName: z.string().optional(),
    link: z.string().optional(),
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    primaryNumber: z.string().optional(),
    birthDate: z.string().optional(),
    currentAge: z.number().optional(),
    birthCity: z.string().optional(),
    birthStateProvince: z.string().optional(),
    birthCountry: z.string().optional(),
    nationality: z.string().optional(),
    height: z.string().optional(),
    weight: z.number().optional(),
    active: z.boolean().optional(),
    alternateCaptain: z.boolean().optional(),
    captain: z.boolean().optional(),
    rookie: z.boolean().optional(),
    shootsCatches: shootsCatches.optional(),
    rosterStatus: z.string().optional(),
    currentTeam: currentTeamResponse.optional(),
    primaryPosition: playerPrimaryPositionResponse.optional(),
  })
  .transform((data) => ({
    id: data['id'],
    fullName: data['fullName'],
    link: data['link'],
    firstName: data['firstName'],
    lastName: data['lastName'],
    primaryNumber: data['primaryNumber'],
    birthDate: data['birthDate'],
    currentAge: data['currentAge'],
    birthCity: data['birthCity'],
    birthStateProvince: data['birthStateProvince'],
    birthCountry: data['birthCountry'],
    nationality: data['nationality'],
    height: data['height'],
    weight: data['weight'],
    active: data['active'],
    alternateCaptain: data['alternateCaptain'],
    captain: data['captain'],
    rookie: data['rookie'],
    shootsCatches: data['shootsCatches'],
    rosterStatus: data['rosterStatus'],
    currentTeam: data['currentTeam'],
    primaryPosition: data['primaryPosition'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const playerRequest = z
  .object({
    id: z.number().nullish(),
    fullName: z.string().nullish(),
    link: z.string().nullish(),
    firstName: z.string().nullish(),
    lastName: z.string().nullish(),
    primaryNumber: z.string().nullish(),
    birthDate: z.string().nullish(),
    currentAge: z.number().nullish(),
    birthCity: z.string().nullish(),
    birthStateProvince: z.string().nullish(),
    birthCountry: z.string().nullish(),
    nationality: z.string().nullish(),
    height: z.string().nullish(),
    weight: z.number().nullish(),
    active: z.boolean().nullish(),
    alternateCaptain: z.boolean().nullish(),
    captain: z.boolean().nullish(),
    rookie: z.boolean().nullish(),
    shootsCatches: shootsCatches.nullish(),
    rosterStatus: z.string().nullish(),
    currentTeam: currentTeamRequest.nullish(),
    primaryPosition: playerPrimaryPositionRequest.nullish(),
  })
  .transform((data) => ({
    id: data['id'],
    fullName: data['fullName'],
    link: data['link'],
    firstName: data['firstName'],
    lastName: data['lastName'],
    primaryNumber: data['primaryNumber'],
    birthDate: data['birthDate'],
    currentAge: data['currentAge'],
    birthCity: data['birthCity'],
    birthStateProvince: data['birthStateProvince'],
    birthCountry: data['birthCountry'],
    nationality: data['nationality'],
    height: data['height'],
    weight: data['weight'],
    active: data['active'],
    alternateCaptain: data['alternateCaptain'],
    captain: data['captain'],
    rookie: data['rookie'],
    shootsCatches: data['shootsCatches'],
    rosterStatus: data['rosterStatus'],
    currentTeam: data['currentTeam'],
    primaryPosition: data['primaryPosition'],
  }));
