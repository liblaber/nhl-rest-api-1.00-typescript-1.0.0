// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const coordinates = z.object({
  x: z.number().optional(),
  y: z.number().optional(),
});

/**
 *
 * @typedef  {Coordinates} coordinates
 * @property {number}
 * @property {number}
 */
export type Coordinates = z.infer<typeof coordinates>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const coordinatesResponse = z
  .object({
    x: z.number().optional(),
    y: z.number().optional(),
  })
  .transform((data) => ({
    x: data['x'],
    y: data['y'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const coordinatesRequest = z.object({ x: z.number().nullish(), y: z.number().nullish() }).transform((data) => ({
  x: data['x'],
  y: data['y'],
}));
