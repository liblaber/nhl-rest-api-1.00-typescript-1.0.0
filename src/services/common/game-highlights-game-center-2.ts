// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { gameHighlight, gameHighlightRequest, gameHighlightResponse } from './game-highlight';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gameHighlightsGameCenter2 = z.object({
  title1: z.string().optional(),
  topicList: z.string().optional(),
  items1: z.array(gameHighlight).optional(),
});

/**
 *
 * @typedef  {GameHighlightsGameCenter2} gameHighlightsGameCenter2
 * @property {string}
 * @property {string}
 * @property {GameHighlight[]}
 */
export type GameHighlightsGameCenter2 = z.infer<typeof gameHighlightsGameCenter2>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gameHighlightsGameCenter2Response = z
  .object({
    title: z.string().optional(),
    topicList: z.string().optional(),
    items: z.array(gameHighlightResponse).optional(),
  })
  .transform((data) => ({
    title1: data['title'],
    topicList: data['topicList'],
    items1: data['items'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gameHighlightsGameCenter2Request = z
  .object({
    title1: z.string().nullish(),
    topicList: z.string().nullish(),
    items1: z.array(gameHighlightRequest).nullish(),
  })
  .transform((data) => ({
    title: data['title1'],
    topicList: data['topicList'],
    items: data['items1'],
  }));
