// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { gameEditorial, gameEditorialRequest, gameEditorialResponse } from './game-editorial';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gameEditorials = z.object({
  title: z.string().optional(),
  topicList: z.string().optional(),
  items: z.array(gameEditorial).optional(),
});

/**
 *
 * @typedef  {GameEditorials} gameEditorials
 * @property {string}
 * @property {string}
 * @property {GameEditorial[]}
 */
export type GameEditorials = z.infer<typeof gameEditorials>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gameEditorialsResponse = z
  .object({
    title: z.string().optional(),
    topicList: z.string().optional(),
    items: z.array(gameEditorialResponse).optional(),
  })
  .transform((data) => ({
    title: data['title'],
    topicList: data['topicList'],
    items: data['items'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gameEditorialsRequest = z
  .object({
    title: z.string().nullish(),
    topicList: z.string().nullish(),
    items: z.array(gameEditorialRequest).nullish(),
  })
  .transform((data) => ({
    title: data['title'],
    topicList: data['topicList'],
    items: data['items'],
  }));
