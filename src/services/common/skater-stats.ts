// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const skaterStats = z.object({
  timeOnIce: z.string().optional(),
  assists: z.number().optional(),
  goals: z.number().optional(),
  shots: z.number().optional(),
  hits: z.number().optional(),
  powerPlayGoals: z.number().optional(),
  powerPlayAssists: z.number().optional(),
  penaltyMinutes: z.number().optional(),
  faceOffWins: z.number().optional(),
  faceoffTaken: z.number().optional(),
  takeaways: z.number().optional(),
  giveaways: z.number().optional(),
  shortHandedGoals: z.number().optional(),
  shortHandedAssists: z.number().optional(),
  blocked: z.number().optional(),
  plusMinus: z.number().optional(),
  evenTimeOnIce: z.string().optional(),
  powerPlayTimeOnIce: z.string().optional(),
  shortHandedTimeOnIce: z.string().optional(),
});

/**
 *
 * @typedef  {SkaterStats} skaterStats
 * @property {string}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type SkaterStats = z.infer<typeof skaterStats>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const skaterStatsResponse = z
  .object({
    timeOnIce: z.string().optional(),
    assists: z.number().optional(),
    goals: z.number().optional(),
    shots: z.number().optional(),
    hits: z.number().optional(),
    powerPlayGoals: z.number().optional(),
    powerPlayAssists: z.number().optional(),
    penaltyMinutes: z.number().optional(),
    faceOffWins: z.number().optional(),
    faceoffTaken: z.number().optional(),
    takeaways: z.number().optional(),
    giveaways: z.number().optional(),
    shortHandedGoals: z.number().optional(),
    shortHandedAssists: z.number().optional(),
    blocked: z.number().optional(),
    plusMinus: z.number().optional(),
    evenTimeOnIce: z.string().optional(),
    powerPlayTimeOnIce: z.string().optional(),
    shortHandedTimeOnIce: z.string().optional(),
  })
  .transform((data) => ({
    timeOnIce: data['timeOnIce'],
    assists: data['assists'],
    goals: data['goals'],
    shots: data['shots'],
    hits: data['hits'],
    powerPlayGoals: data['powerPlayGoals'],
    powerPlayAssists: data['powerPlayAssists'],
    penaltyMinutes: data['penaltyMinutes'],
    faceOffWins: data['faceOffWins'],
    faceoffTaken: data['faceoffTaken'],
    takeaways: data['takeaways'],
    giveaways: data['giveaways'],
    shortHandedGoals: data['shortHandedGoals'],
    shortHandedAssists: data['shortHandedAssists'],
    blocked: data['blocked'],
    plusMinus: data['plusMinus'],
    evenTimeOnIce: data['evenTimeOnIce'],
    powerPlayTimeOnIce: data['powerPlayTimeOnIce'],
    shortHandedTimeOnIce: data['shortHandedTimeOnIce'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const skaterStatsRequest = z
  .object({
    timeOnIce: z.string().nullish(),
    assists: z.number().nullish(),
    goals: z.number().nullish(),
    shots: z.number().nullish(),
    hits: z.number().nullish(),
    powerPlayGoals: z.number().nullish(),
    powerPlayAssists: z.number().nullish(),
    penaltyMinutes: z.number().nullish(),
    faceOffWins: z.number().nullish(),
    faceoffTaken: z.number().nullish(),
    takeaways: z.number().nullish(),
    giveaways: z.number().nullish(),
    shortHandedGoals: z.number().nullish(),
    shortHandedAssists: z.number().nullish(),
    blocked: z.number().nullish(),
    plusMinus: z.number().nullish(),
    evenTimeOnIce: z.string().nullish(),
    powerPlayTimeOnIce: z.string().nullish(),
    shortHandedTimeOnIce: z.string().nullish(),
  })
  .transform((data) => ({
    timeOnIce: data['timeOnIce'],
    assists: data['assists'],
    goals: data['goals'],
    shots: data['shots'],
    hits: data['hits'],
    powerPlayGoals: data['powerPlayGoals'],
    powerPlayAssists: data['powerPlayAssists'],
    penaltyMinutes: data['penaltyMinutes'],
    faceOffWins: data['faceOffWins'],
    faceoffTaken: data['faceoffTaken'],
    takeaways: data['takeaways'],
    giveaways: data['giveaways'],
    shortHandedGoals: data['shortHandedGoals'],
    shortHandedAssists: data['shortHandedAssists'],
    blocked: data['blocked'],
    plusMinus: data['plusMinus'],
    evenTimeOnIce: data['evenTimeOnIce'],
    powerPlayTimeOnIce: data['powerPlayTimeOnIce'],
    shortHandedTimeOnIce: data['shortHandedTimeOnIce'],
  }));
