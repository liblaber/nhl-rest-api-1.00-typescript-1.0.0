// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { contributors, contributorsRequest, contributorsResponse } from './contributors';

/**
 * The shape of the model inside the application code - what the users use
 */
export const contributor = z.object({
  contributors: z.array(contributors).optional(),
  source: z.string().optional(),
});

/**
 *
 * @typedef  {Contributor} contributor
 * @property {Contributors[]}
 * @property {string}
 */
export type Contributor = z.infer<typeof contributor>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const contributorResponse = z
  .object({
    contributors: z.array(contributorsResponse).optional(),
    source: z.string().optional(),
  })
  .transform((data) => ({
    contributors: data['contributors'],
    source: data['source'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const contributorRequest = z
  .object({ contributors: z.array(contributorsRequest).nullish(), source: z.string().nullish() })
  .transform((data) => ({
    contributors: data['contributors'],
    source: data['source'],
  }));
