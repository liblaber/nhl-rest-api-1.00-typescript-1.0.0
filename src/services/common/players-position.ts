// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const playersPosition = z.object({
  code: z.string().optional(),
  name: z.string().optional(),
  type_: z.string().optional(),
  abbreviation: z.string().optional(),
});

/**
 *
 * @typedef  {PlayersPosition} playersPosition
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type PlayersPosition = z.infer<typeof playersPosition>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const playersPositionResponse = z
  .object({
    code: z.string().optional(),
    name: z.string().optional(),
    type: z.string().optional(),
    abbreviation: z.string().optional(),
  })
  .transform((data) => ({
    code: data['code'],
    name: data['name'],
    type_: data['type'],
    abbreviation: data['abbreviation'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const playersPositionRequest = z
  .object({
    code: z.string().nullish(),
    name: z.string().nullish(),
    type_: z.string().nullish(),
    abbreviation: z.string().nullish(),
  })
  .transform((data) => ({
    code: data['code'],
    name: data['name'],
    type: data['type_'],
    abbreviation: data['abbreviation'],
  }));
