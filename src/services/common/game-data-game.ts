// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gameDataGame = z.object({
  pk: z.number().optional(),
  season: z.string().optional(),
  type_: z.string().optional(),
});

/**
 *
 * @typedef  {GameDataGame} gameDataGame
 * @property {number}
 * @property {string}
 * @property {string}
 */
export type GameDataGame = z.infer<typeof gameDataGame>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gameDataGameResponse = z
  .object({
    pk: z.number().optional(),
    season: z.string().optional(),
    type: z.string().optional(),
  })
  .transform((data) => ({
    pk: data['pk'],
    season: data['season'],
    type_: data['type'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gameDataGameRequest = z
  .object({ pk: z.number().nullish(), season: z.string().nullish(), type_: z.string().nullish() })
  .transform((data) => ({
    pk: data['pk'],
    season: data['season'],
    type: data['type_'],
  }));
