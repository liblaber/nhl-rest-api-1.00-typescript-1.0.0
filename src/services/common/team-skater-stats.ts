// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const teamSkaterStats = z.object({
  goals: z.number().optional(),
  pim: z.number().optional(),
  shots: z.number().optional(),
  powerPlayPercentage: z.string().optional(),
  powerPlayGoals: z.number().optional(),
  powerPlayOpportunities: z.number().optional(),
  faceOffWinPercentage: z.string().optional(),
  blocked: z.number().optional(),
  takeaways: z.number().optional(),
  giveaways: z.number().optional(),
  hits: z.number().optional(),
});

/**
 *
 * @typedef  {TeamSkaterStats} teamSkaterStats
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {string}
 * @property {number}
 * @property {number}
 * @property {string}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 */
export type TeamSkaterStats = z.infer<typeof teamSkaterStats>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const teamSkaterStatsResponse = z
  .object({
    goals: z.number().optional(),
    pim: z.number().optional(),
    shots: z.number().optional(),
    powerPlayPercentage: z.string().optional(),
    powerPlayGoals: z.number().optional(),
    powerPlayOpportunities: z.number().optional(),
    faceOffWinPercentage: z.string().optional(),
    blocked: z.number().optional(),
    takeaways: z.number().optional(),
    giveaways: z.number().optional(),
    hits: z.number().optional(),
  })
  .transform((data) => ({
    goals: data['goals'],
    pim: data['pim'],
    shots: data['shots'],
    powerPlayPercentage: data['powerPlayPercentage'],
    powerPlayGoals: data['powerPlayGoals'],
    powerPlayOpportunities: data['powerPlayOpportunities'],
    faceOffWinPercentage: data['faceOffWinPercentage'],
    blocked: data['blocked'],
    takeaways: data['takeaways'],
    giveaways: data['giveaways'],
    hits: data['hits'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const teamSkaterStatsRequest = z
  .object({
    goals: z.number().nullish(),
    pim: z.number().nullish(),
    shots: z.number().nullish(),
    powerPlayPercentage: z.string().nullish(),
    powerPlayGoals: z.number().nullish(),
    powerPlayOpportunities: z.number().nullish(),
    faceOffWinPercentage: z.string().nullish(),
    blocked: z.number().nullish(),
    takeaways: z.number().nullish(),
    giveaways: z.number().nullish(),
    hits: z.number().nullish(),
  })
  .transform((data) => ({
    goals: data['goals'],
    pim: data['pim'],
    shots: data['shots'],
    powerPlayPercentage: data['powerPlayPercentage'],
    powerPlayGoals: data['powerPlayGoals'],
    powerPlayOpportunities: data['powerPlayOpportunities'],
    faceOffWinPercentage: data['faceOffWinPercentage'],
    blocked: data['blocked'],
    takeaways: data['takeaways'],
    giveaways: data['giveaways'],
    hits: data['hits'],
  }));
