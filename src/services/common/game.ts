// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { metaData, metaDataRequest, metaDataResponse } from './meta-data';
import { gameData, gameDataRequest, gameDataResponse } from './game-data';
import { liveData, liveDataRequest, liveDataResponse } from './live-data';

/**
 * The shape of the model inside the application code - what the users use
 */
export const game = z.object({
  copyright: z.string().optional(),
  gamePk: z.number().optional(),
  link: z.string().optional(),
  metaData: metaData.optional(),
  gameData: gameData.optional(),
  liveData: liveData.optional(),
});

/**
 *
 * @typedef  {Game} game
 * @property {string}
 * @property {number}
 * @property {string}
 * @property {MetaData}
 * @property {GameData}
 * @property {LiveData}
 */
export type Game = z.infer<typeof game>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gameResponse = z
  .object({
    copyright: z.string().optional(),
    gamePk: z.number().optional(),
    link: z.string().optional(),
    metaData: metaDataResponse.optional(),
    gameData: gameDataResponse.optional(),
    liveData: liveDataResponse.optional(),
  })
  .transform((data) => ({
    copyright: data['copyright'],
    gamePk: data['gamePk'],
    link: data['link'],
    metaData: data['metaData'],
    gameData: data['gameData'],
    liveData: data['liveData'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gameRequest = z
  .object({
    copyright: z.string().nullish(),
    gamePk: z.number().nullish(),
    link: z.string().nullish(),
    metaData: metaDataRequest.nullish(),
    gameData: gameDataRequest.nullish(),
    liveData: liveDataRequest.nullish(),
  })
  .transform((data) => ({
    copyright: data['copyright'],
    gamePk: data['gamePk'],
    link: data['link'],
    metaData: data['metaData'],
    gameData: data['gameData'],
    liveData: data['liveData'],
  }));
