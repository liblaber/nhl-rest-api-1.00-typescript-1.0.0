// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { standingsType } from './standings-type';
import { league, leagueRequest, leagueResponse } from './league';
import { recordsDivision, recordsDivisionRequest, recordsDivisionResponse } from './records-division';
import { recordsConference, recordsConferenceRequest, recordsConferenceResponse } from './records-conference';
import { teamRecords, teamRecordsRequest, teamRecordsResponse } from './team-records';

/**
 * The shape of the model inside the application code - what the users use
 */
export const records = z.object({
  standingsType: standingsType.optional(),
  league: league.optional(),
  division: recordsDivision.optional(),
  conference: recordsConference.optional(),
  teamRecords: z.array(teamRecords).optional(),
});

/**
 *
 * @typedef  {Records} records
 * @property {StandingsType}
 * @property {League}
 * @property {RecordsDivision}
 * @property {RecordsConference}
 * @property {TeamRecords[]}
 */
export type Records = z.infer<typeof records>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const recordsResponse = z
  .object({
    standingsType: standingsType.optional(),
    league: leagueResponse.optional(),
    division: recordsDivisionResponse.optional(),
    conference: recordsConferenceResponse.optional(),
    teamRecords: z.array(teamRecordsResponse).optional(),
  })
  .transform((data) => ({
    standingsType: data['standingsType'],
    league: data['league'],
    division: data['division'],
    conference: data['conference'],
    teamRecords: data['teamRecords'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const recordsRequest = z
  .object({
    standingsType: standingsType.nullish(),
    league: leagueRequest.nullish(),
    division: recordsDivisionRequest.nullish(),
    conference: recordsConferenceRequest.nullish(),
    teamRecords: z.array(teamRecordsRequest).nullish(),
  })
  .transform((data) => ({
    standingsType: data['standingsType'],
    league: data['league'],
    division: data['division'],
    conference: data['conference'],
    teamRecords: data['teamRecords'],
  }));
