// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { playersPlayer, playersPlayerRequest, playersPlayerResponse } from './players-player';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gamePlayPlayers = z.object({
  player1: playersPlayer.optional(),
  playerType: z.string().optional(),
});

/**
 *
 * @typedef  {GamePlayPlayers} gamePlayPlayers
 * @property {PlayersPlayer}
 * @property {string}
 */
export type GamePlayPlayers = z.infer<typeof gamePlayPlayers>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gamePlayPlayersResponse = z
  .object({
    player: playersPlayerResponse.optional(),
    playerType: z.string().optional(),
  })
  .transform((data) => ({
    player1: data['player'],
    playerType: data['playerType'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gamePlayPlayersRequest = z
  .object({ player1: playersPlayerRequest.nullish(), playerType: z.string().nullish() })
  .transform((data) => ({
    player: data['player1'],
    playerType: data['playerType'],
  }));
