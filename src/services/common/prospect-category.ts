// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const prospectCategory = z.object({
  id: z.number().optional(),
  shortName: z.string().optional(),
  name: z.string().optional(),
});

/**
 *
 * @typedef  {ProspectCategory} prospectCategory
 * @property {number}
 * @property {string}
 * @property {string}
 */
export type ProspectCategory = z.infer<typeof prospectCategory>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const prospectCategoryResponse = z
  .object({
    id: z.number().optional(),
    shortName: z.string().optional(),
    name: z.string().optional(),
  })
  .transform((data) => ({
    id: data['id'],
    shortName: data['shortName'],
    name: data['name'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const prospectCategoryRequest = z
  .object({ id: z.number().nullish(), shortName: z.string().nullish(), name: z.string().nullish() })
  .transform((data) => ({
    id: data['id'],
    shortName: data['shortName'],
    name: data['name'],
  }));
