// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const metaData = z.object({
  wait: z.number().optional(),
  timeStamp: z.string().optional(),
});

/**
 *
 * @typedef  {MetaData} metaData
 * @property {number}
 * @property {string}
 */
export type MetaData = z.infer<typeof metaData>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const metaDataResponse = z
  .object({
    wait: z.number().optional(),
    timeStamp: z.string().optional(),
  })
  .transform((data) => ({
    wait: data['wait'],
    timeStamp: data['timeStamp'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const metaDataRequest = z
  .object({ wait: z.number().nullish(), timeStamp: z.string().nullish() })
  .transform((data) => ({
    wait: data['wait'],
    timeStamp: data['timeStamp'],
  }));
