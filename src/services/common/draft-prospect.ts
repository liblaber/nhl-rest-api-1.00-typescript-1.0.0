// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  draftProspectPrimaryPosition,
  draftProspectPrimaryPositionRequest,
  draftProspectPrimaryPositionResponse,
} from './draft-prospect-primary-position';
import { prospectCategory, prospectCategoryRequest, prospectCategoryResponse } from './prospect-category';
import { amateurTeam, amateurTeamRequest, amateurTeamResponse } from './amateur-team';
import { amateurLeague, amateurLeagueRequest, amateurLeagueResponse } from './amateur-league';

/**
 * The shape of the model inside the application code - what the users use
 */
export const draftProspect = z.object({
  id: z.number().optional(),
  fullName: z.string().optional(),
  link: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  birthDate: z.string().optional(),
  birthCity: z.string().optional(),
  birthCountry: z.string().optional(),
  nationality: z.string().optional(),
  height: z.string().optional(),
  weight: z.number().optional(),
  shootsCatches: z.string().optional(),
  primaryPosition: draftProspectPrimaryPosition.optional(),
  prospectCategory: prospectCategory.optional(),
  amateurTeam: amateurTeam.optional(),
  amateurLeague: amateurLeague.optional(),
  ranks: z.any().optional(),
});

/**
 *
 * @typedef  {DraftProspect} draftProspect
 * @property {number}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {string}
 * @property {DraftProspectPrimaryPosition}
 * @property {ProspectCategory}
 * @property {AmateurTeam}
 * @property {AmateurLeague}
 * @property {any}
 */
export type DraftProspect = z.infer<typeof draftProspect>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const draftProspectResponse = z
  .object({
    id: z.number().optional(),
    fullName: z.string().optional(),
    link: z.string().optional(),
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    birthDate: z.string().optional(),
    birthCity: z.string().optional(),
    birthCountry: z.string().optional(),
    nationality: z.string().optional(),
    height: z.string().optional(),
    weight: z.number().optional(),
    shootsCatches: z.string().optional(),
    primaryPosition: draftProspectPrimaryPositionResponse.optional(),
    prospectCategory: prospectCategoryResponse.optional(),
    amateurTeam: amateurTeamResponse.optional(),
    amateurLeague: amateurLeagueResponse.optional(),
    ranks: z.any().optional(),
  })
  .transform((data) => ({
    id: data['id'],
    fullName: data['fullName'],
    link: data['link'],
    firstName: data['firstName'],
    lastName: data['lastName'],
    birthDate: data['birthDate'],
    birthCity: data['birthCity'],
    birthCountry: data['birthCountry'],
    nationality: data['nationality'],
    height: data['height'],
    weight: data['weight'],
    shootsCatches: data['shootsCatches'],
    primaryPosition: data['primaryPosition'],
    prospectCategory: data['prospectCategory'],
    amateurTeam: data['amateurTeam'],
    amateurLeague: data['amateurLeague'],
    ranks: data['ranks'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const draftProspectRequest = z
  .object({
    id: z.number().nullish(),
    fullName: z.string().nullish(),
    link: z.string().nullish(),
    firstName: z.string().nullish(),
    lastName: z.string().nullish(),
    birthDate: z.string().nullish(),
    birthCity: z.string().nullish(),
    birthCountry: z.string().nullish(),
    nationality: z.string().nullish(),
    height: z.string().nullish(),
    weight: z.number().nullish(),
    shootsCatches: z.string().nullish(),
    primaryPosition: draftProspectPrimaryPositionRequest.nullish(),
    prospectCategory: prospectCategoryRequest.nullish(),
    amateurTeam: amateurTeamRequest.nullish(),
    amateurLeague: amateurLeagueRequest.nullish(),
    ranks: z.any().nullish(),
  })
  .transform((data) => ({
    id: data['id'],
    fullName: data['fullName'],
    link: data['link'],
    firstName: data['firstName'],
    lastName: data['lastName'],
    birthDate: data['birthDate'],
    birthCity: data['birthCity'],
    birthCountry: data['birthCountry'],
    nationality: data['nationality'],
    height: data['height'],
    weight: data['weight'],
    shootsCatches: data['shootsCatches'],
    primaryPosition: data['primaryPosition'],
    prospectCategory: data['prospectCategory'],
    amateurTeam: data['amateurTeam'],
    amateurLeague: data['amateurLeague'],
    ranks: data['ranks'],
  }));
