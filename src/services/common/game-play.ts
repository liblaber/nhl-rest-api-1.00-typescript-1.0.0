// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { gamePlayPlayers, gamePlayPlayersRequest, gamePlayPlayersResponse } from './game-play-players';
import { result, resultRequest, resultResponse } from './result';
import { about, aboutRequest, aboutResponse } from './about';
import { coordinates, coordinatesRequest, coordinatesResponse } from './coordinates';
import { gamePlayTeam, gamePlayTeamRequest, gamePlayTeamResponse } from './game-play-team';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gamePlay = z.object({
  players: z.array(gamePlayPlayers).optional(),
  result: result.optional(),
  about: about.optional(),
  coordinates: coordinates.optional(),
  team1: gamePlayTeam.optional(),
});

/**
 *
 * @typedef  {GamePlay} gamePlay
 * @property {GamePlayPlayers[]}
 * @property {Result}
 * @property {About}
 * @property {Coordinates}
 * @property {GamePlayTeam}
 */
export type GamePlay = z.infer<typeof gamePlay>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gamePlayResponse = z
  .object({
    players: z.array(gamePlayPlayersResponse).optional(),
    result: resultResponse.optional(),
    about: aboutResponse.optional(),
    coordinates: coordinatesResponse.optional(),
    team: gamePlayTeamResponse.optional(),
  })
  .transform((data) => ({
    players: data['players'],
    result: data['result'],
    about: data['about'],
    coordinates: data['coordinates'],
    team1: data['team'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gamePlayRequest = z
  .object({
    players: z.array(gamePlayPlayersRequest).nullish(),
    result: resultRequest.nullish(),
    about: aboutRequest.nullish(),
    coordinates: coordinatesRequest.nullish(),
    team1: gamePlayTeamRequest.nullish(),
  })
  .transform((data) => ({
    players: data['players'],
    result: data['result'],
    about: data['about'],
    coordinates: data['coordinates'],
    team: data['team1'],
  }));
