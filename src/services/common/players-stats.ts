// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { skaterStats, skaterStatsRequest, skaterStatsResponse } from './skater-stats';

/**
 * The shape of the model inside the application code - what the users use
 */
export const playersStats = z.object({
  skaterStats: skaterStats.optional(),
});

/**
 *
 * @typedef  {PlayersStats} playersStats
 * @property {SkaterStats}
 */
export type PlayersStats = z.infer<typeof playersStats>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const playersStatsResponse = z
  .object({
    skaterStats: skaterStatsResponse.optional(),
  })
  .transform((data) => ({
    skaterStats: data['skaterStats'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const playersStatsRequest = z.object({ skaterStats: skaterStatsRequest.nullish() }).transform((data) => ({
  skaterStats: data['skaterStats'],
}));
