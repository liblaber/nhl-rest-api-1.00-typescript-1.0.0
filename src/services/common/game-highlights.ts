// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  gameHighlightsGameCenter2,
  gameHighlightsGameCenter2Request,
  gameHighlightsGameCenter2Response,
} from './game-highlights-game-center-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gameHighlights = z.object({
  scoreboard: gameHighlightsGameCenter2.optional(),
  gameCenter: gameHighlightsGameCenter2.optional(),
});

/**
 *
 * @typedef  {GameHighlights} gameHighlights
 * @property {GameHighlightsGameCenter2}
 * @property {GameHighlightsGameCenter2}
 */
export type GameHighlights = z.infer<typeof gameHighlights>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gameHighlightsResponse = z
  .object({
    scoreboard: gameHighlightsGameCenter2Response.optional(),
    gameCenter: gameHighlightsGameCenter2Response.optional(),
  })
  .transform((data) => ({
    scoreboard: data['scoreboard'],
    gameCenter: data['gameCenter'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gameHighlightsRequest = z
  .object({
    scoreboard: gameHighlightsGameCenter2Request.nullish(),
    gameCenter: gameHighlightsGameCenter2Request.nullish(),
  })
  .transform((data) => ({
    scoreboard: data['scoreboard'],
    gameCenter: data['gameCenter'],
  }));
