// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { picks, picksRequest, picksResponse } from './picks';

/**
 * The shape of the model inside the application code - what the users use
 */
export const rounds = z.object({
  roundNumber: z.number().optional(),
  round: z.number().optional(),
  picks: z.array(picks).optional(),
});

/**
 *
 * @typedef  {Rounds} rounds
 * @property {number}
 * @property {number}
 * @property {Picks[]}
 */
export type Rounds = z.infer<typeof rounds>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const roundsResponse = z
  .object({
    roundNumber: z.number().optional(),
    round: z.number().optional(),
    picks: z.array(picksResponse).optional(),
  })
  .transform((data) => ({
    roundNumber: data['roundNumber'],
    round: data['round'],
    picks: data['picks'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const roundsRequest = z
  .object({ roundNumber: z.number().nullish(), round: z.number().nullish(), picks: z.array(picksRequest).nullish() })
  .transform((data) => ({
    roundNumber: data['roundNumber'],
    round: data['round'],
    picks: data['picks'],
  }));
