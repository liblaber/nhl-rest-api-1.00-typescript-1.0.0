// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { gameBoxscoreTeams, gameBoxscoreTeamsRequest, gameBoxscoreTeamsResponse } from './game-boxscore-teams';
import { gameOfficial, gameOfficialRequest, gameOfficialResponse } from './game-official';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gameBoxscore = z.object({
  teams: gameBoxscoreTeams.optional(),
  officials: z.array(gameOfficial).optional(),
});

/**
 *
 * @typedef  {GameBoxscore} gameBoxscore
 * @property {GameBoxscoreTeams}
 * @property {GameOfficial[]}
 */
export type GameBoxscore = z.infer<typeof gameBoxscore>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gameBoxscoreResponse = z
  .object({
    teams: gameBoxscoreTeamsResponse.optional(),
    officials: z.array(gameOfficialResponse).optional(),
  })
  .transform((data) => ({
    teams: data['teams'],
    officials: data['officials'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gameBoxscoreRequest = z
  .object({ teams: gameBoxscoreTeamsRequest.nullish(), officials: z.array(gameOfficialRequest).nullish() })
  .transform((data) => ({
    teams: data['teams'],
    officials: data['officials'],
  }));
