// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { shootoutInfoAway, shootoutInfoAwayRequest, shootoutInfoAwayResponse } from './shootout-info-away';
import { shootoutInfoHome, shootoutInfoHomeRequest, shootoutInfoHomeResponse } from './shootout-info-home';

/**
 * The shape of the model inside the application code - what the users use
 */
export const shootoutInfo = z.object({
  away: shootoutInfoAway.optional(),
  home: shootoutInfoHome.optional(),
});

/**
 *
 * @typedef  {ShootoutInfo} shootoutInfo
 * @property {ShootoutInfoAway}
 * @property {ShootoutInfoHome}
 */
export type ShootoutInfo = z.infer<typeof shootoutInfo>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const shootoutInfoResponse = z
  .object({
    away: shootoutInfoAwayResponse.optional(),
    home: shootoutInfoHomeResponse.optional(),
  })
  .transform((data) => ({
    away: data['away'],
    home: data['home'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const shootoutInfoRequest = z
  .object({ away: shootoutInfoAwayRequest.nullish(), home: shootoutInfoHomeRequest.nullish() })
  .transform((data) => ({
    away: data['away'],
    home: data['home'],
  }));
