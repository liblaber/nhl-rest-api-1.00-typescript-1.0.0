// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { timeZone, timeZoneRequest, timeZoneResponse } from './time-zone';

/**
 * The shape of the model inside the application code - what the users use
 */
export const venue = z.object({
  name: z.string().optional(),
  link: z.string().optional(),
  city: z.string().optional(),
  timeZone: timeZone.optional(),
});

/**
 *
 * @typedef  {Venue} venue
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {TimeZone}
 */
export type Venue = z.infer<typeof venue>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const venueResponse = z
  .object({
    name: z.string().optional(),
    link: z.string().optional(),
    city: z.string().optional(),
    timeZone: timeZoneResponse.optional(),
  })
  .transform((data) => ({
    name: data['name'],
    link: data['link'],
    city: data['city'],
    timeZone: data['timeZone'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const venueRequest = z
  .object({
    name: z.string().nullish(),
    link: z.string().nullish(),
    city: z.string().nullish(),
    timeZone: timeZoneRequest.nullish(),
  })
  .transform((data) => ({
    name: data['name'],
    link: data['link'],
    city: data['city'],
    timeZone: data['timeZone'],
  }));
