// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const goals = z.object({
  away: z.number().optional(),
  home: z.number().optional(),
});

/**
 *
 * @typedef  {Goals} goals
 * @property {number}
 * @property {number}
 */
export type Goals = z.infer<typeof goals>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const goalsResponse = z
  .object({
    away: z.number().optional(),
    home: z.number().optional(),
  })
  .transform((data) => ({
    away: data['away'],
    home: data['home'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const goalsRequest = z.object({ away: z.number().nullish(), home: z.number().nullish() }).transform((data) => ({
  away: data['away'],
  home: data['home'],
}));
