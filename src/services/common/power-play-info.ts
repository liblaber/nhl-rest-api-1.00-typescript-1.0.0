// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const powerPlayInfo = z.object({
  situationTimeRemaining: z.number().optional(),
  situationTimeElapsed: z.number().optional(),
  inSituation: z.boolean().optional(),
});

/**
 *
 * @typedef  {PowerPlayInfo} powerPlayInfo
 * @property {number}
 * @property {number}
 * @property {boolean}
 */
export type PowerPlayInfo = z.infer<typeof powerPlayInfo>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const powerPlayInfoResponse = z
  .object({
    situationTimeRemaining: z.number().optional(),
    situationTimeElapsed: z.number().optional(),
    inSituation: z.boolean().optional(),
  })
  .transform((data) => ({
    situationTimeRemaining: data['situationTimeRemaining'],
    situationTimeElapsed: data['situationTimeElapsed'],
    inSituation: data['inSituation'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const powerPlayInfoRequest = z
  .object({
    situationTimeRemaining: z.number().nullish(),
    situationTimeElapsed: z.number().nullish(),
    inSituation: z.boolean().nullish(),
  })
  .transform((data) => ({
    situationTimeRemaining: data['situationTimeRemaining'],
    situationTimeElapsed: data['situationTimeElapsed'],
    inSituation: data['inSituation'],
  }));
