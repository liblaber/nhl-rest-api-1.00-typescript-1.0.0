// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const result = z.object({
  event: z.string().optional(),
  eventCode: z.string().optional(),
  eventTypeId: z.string().optional(),
  description: z.string().optional(),
});

/**
 *
 * @typedef  {Result} result
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type Result = z.infer<typeof result>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const resultResponse = z
  .object({
    event: z.string().optional(),
    eventCode: z.string().optional(),
    eventTypeId: z.string().optional(),
    description: z.string().optional(),
  })
  .transform((data) => ({
    event: data['event'],
    eventCode: data['eventCode'],
    eventTypeId: data['eventTypeId'],
    description: data['description'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const resultRequest = z
  .object({
    event: z.string().nullish(),
    eventCode: z.string().nullish(),
    eventTypeId: z.string().nullish(),
    description: z.string().nullish(),
  })
  .transform((data) => ({
    event: data['event'],
    eventCode: data['eventCode'],
    eventTypeId: data['eventTypeId'],
    description: data['description'],
  }));
