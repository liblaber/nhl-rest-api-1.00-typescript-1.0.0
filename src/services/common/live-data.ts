// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { plays, playsRequest, playsResponse } from './plays';
import { gameLinescore, gameLinescoreRequest, gameLinescoreResponse } from './game-linescore';
import { gameBoxscore, gameBoxscoreRequest, gameBoxscoreResponse } from './game-boxscore';
import { decisions, decisionsRequest, decisionsResponse } from './decisions';

/**
 * The shape of the model inside the application code - what the users use
 */
export const liveData = z.object({
  plays: plays.optional(),
  linescore: gameLinescore.optional(),
  boxscore: gameBoxscore.optional(),
  decisions: decisions.optional(),
});

/**
 *
 * @typedef  {LiveData} liveData
 * @property {Plays}
 * @property {GameLinescore}
 * @property {GameBoxscore}
 * @property {Decisions}
 */
export type LiveData = z.infer<typeof liveData>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const liveDataResponse = z
  .object({
    plays: playsResponse.optional(),
    linescore: gameLinescoreResponse.optional(),
    boxscore: gameBoxscoreResponse.optional(),
    decisions: decisionsResponse.optional(),
  })
  .transform((data) => ({
    plays: data['plays'],
    linescore: data['linescore'],
    boxscore: data['boxscore'],
    decisions: data['decisions'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const liveDataRequest = z
  .object({
    plays: playsRequest.nullish(),
    linescore: gameLinescoreRequest.nullish(),
    boxscore: gameBoxscoreRequest.nullish(),
    decisions: decisionsRequest.nullish(),
  })
  .transform((data) => ({
    plays: data['plays'],
    linescore: data['linescore'],
    boxscore: data['boxscore'],
    decisions: data['decisions'],
  }));
