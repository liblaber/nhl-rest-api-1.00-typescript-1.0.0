// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { rosterPerson, rosterPersonRequest, rosterPersonResponse } from './roster-person';
import { rosterPosition, rosterPositionRequest, rosterPositionResponse } from './roster-position';

/**
 * The shape of the model inside the application code - what the users use
 */
export const roster = z.object({
  person: rosterPerson.optional(),
  jerseyNumber: z.number().optional(),
  position: rosterPosition.optional(),
});

/**
 *
 * @typedef  {Roster} roster
 * @property {RosterPerson}
 * @property {number}
 * @property {RosterPosition}
 */
export type Roster = z.infer<typeof roster>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const rosterResponse = z
  .object({
    person: rosterPersonResponse.optional(),
    jerseyNumber: z.number().optional(),
    position: rosterPositionResponse.optional(),
  })
  .transform((data) => ({
    person: data['person'],
    jerseyNumber: data['jerseyNumber'],
    position: data['position'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const rosterRequest = z
  .object({
    person: rosterPersonRequest.nullish(),
    jerseyNumber: z.number().nullish(),
    position: rosterPositionRequest.nullish(),
  })
  .transform((data) => ({
    person: data['person'],
    jerseyNumber: data['jerseyNumber'],
    position: data['position'],
  }));
