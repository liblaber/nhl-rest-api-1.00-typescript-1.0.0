// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { teamsAway1, teamsAway1Request, teamsAway1Response } from './teams-away-1';
import { teamsHome1, teamsHome1Request, teamsHome1Response } from './teams-home-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const gamesTeams = z.object({
  away: teamsAway1.optional(),
  home: teamsHome1.optional(),
});

/**
 *
 * @typedef  {GamesTeams} gamesTeams
 * @property {TeamsAway1}
 * @property {TeamsHome1}
 */
export type GamesTeams = z.infer<typeof gamesTeams>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const gamesTeamsResponse = z
  .object({
    away: teamsAway1Response.optional(),
    home: teamsHome1Response.optional(),
  })
  .transform((data) => ({
    away: data['away'],
    home: data['home'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const gamesTeamsRequest = z
  .object({ away: teamsAway1Request.nullish(), home: teamsHome1Request.nullish() })
  .transform((data) => ({
    away: data['away'],
    home: data['home'],
  }));
