// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { drafts, draftsRequest, draftsResponse } from './drafts';

/**
 * The shape of the model inside the application code - what the users use
 */
export const draft = z.object({
  copyright: z.string().optional(),
  drafts: z.array(drafts).optional(),
});

/**
 *
 * @typedef  {Draft} draft
 * @property {string}
 * @property {Drafts[]}
 */
export type Draft = z.infer<typeof draft>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const draftResponse = z
  .object({
    copyright: z.string().optional(),
    drafts: z.array(draftsResponse).optional(),
  })
  .transform((data) => ({
    copyright: data['copyright'],
    drafts: data['drafts'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const draftRequest = z
  .object({ copyright: z.string().nullish(), drafts: z.array(draftsRequest).nullish() })
  .transform((data) => ({
    copyright: data['copyright'],
    drafts: data['drafts'],
  }));
